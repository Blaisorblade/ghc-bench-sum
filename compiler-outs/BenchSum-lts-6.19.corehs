$ stack --resolver lts-6.19 exec -- ghc-core --no-syntax -- -O BenchSum.hs
[1 of 1] Compiling Main             ( BenchSum.hs, BenchSum.o )

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 320, types: 329, coercions: 41}

myList :: [Int]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
myList = efdtInt 1 2 10000

main21 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main21 = unpackCString# "avgSimpl"#

main20 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main20 = unpackCString# "fsum2"#

$wgo1 [InlPrag=[0], Occ=LoopBreaker]
  :: [Int] -> Int# -> Int#

$wgo1 =
  \ (w_s8Bf :: [Int]) (ww_s8Bj :: Int#) ->
    case w_s8Bf of _ [Occ=Dead] {
      [] -> ww_s8Bj;
      : y_a7h8 ys_a7h9 ->
        case y_a7h8 of _ [Occ=Dead] { I# y1_a7Aj ->
        $wgo1 ys_a7h9 (+# ww_s8Bj y1_a7Aj)
        }
    }

main_eta2 [InlPrag=INLINE[0]] :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8Bp [Occ=Once] :: [Int]) ->
                 case $wgo1 w_s8Bp 0 of ww_s8Bs { __DEFAULT ->
                 I# ww_s8Bs
                 }}]
main_eta2 =
  \ (w_s8Bp :: [Int]) ->
    case $wgo1 w_s8Bp 0 of ww_s8Bs { __DEFAULT ->
    I# ww_s8Bs
    }

$wa7 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa7 =
  \ (w_s8Bu :: [Int] -> Int)
    (w1_s8Bv :: [Int])
    (ww_s8BA :: Int#)
    (w2_s8Bx [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s8BA 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s8Bu w1_s8Bv of _ [Occ=Dead] { I# ipv_a8oz ->
                ()
                })
               w2_s8Bx
        of _ [Occ=Dead] { (# ipv_a8oq, ipv1_a8or #) ->
        $wa7 w_s8Bu w1_s8Bv (-# ww_s8BA 1) ipv_a8oq
        };
      True -> (# w2_s8Bx, () #)
    }

$wa6 [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wa6 =
  \ (ww_s8BH :: Int#)
    (w_s8BE [OS=OneShot] :: State# RealWorld) ->
    $wa7 main_eta2 myList ww_s8BH w_s8BE

main19 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8BD [Occ=Once!] :: Int64)
                 (w1_s8BE [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_s8BD of _ [Occ=Dead] { I64# ww1_s8BH [Occ=Once] ->
                 $wa6 ww1_s8BH w1_s8BE
                 }}]
main19 =
  \ (w_s8BD :: Int64)
    (w1_s8BE [OS=OneShot] :: State# RealWorld) ->
    case w_s8BD of _ [Occ=Dead] { I64# ww1_s8BH ->
    $wa6 ww1_s8BH w1_s8BE
    }

main18 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main18 =
  Criterion.Types.Benchmark
    main20
    (main19
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                ~R# Benchmarkable))

main17 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main17 = unpackCString# "fsum1"#

main10 :: Int
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
main10 = I# 0

main_eta :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
main_eta =
  foldl @ Int @ Int $fNumInt_$c+ main10

$wa5 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa5 =
  \ (w_s8BK :: [Int] -> Int)
    (w1_s8BL :: [Int])
    (ww_s8BQ :: Int#)
    (w2_s8BN [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s8BQ 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s8BK w1_s8BL of _ [Occ=Dead] { I# ipv_a8oz ->
                ()
                })
               w2_s8BN
        of _ [Occ=Dead] { (# ipv_a8oq, ipv1_a8or #) ->
        $wa5 w_s8BK w1_s8BL (-# ww_s8BQ 1) ipv_a8oq
        };
      True -> (# w2_s8BN, () #)
    }

$wa4 [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wa4 =
  \ (ww_s8BX :: Int#)
    (w_s8BU [OS=OneShot] :: State# RealWorld) ->
    $wa5 main_eta myList ww_s8BX w_s8BU

main16 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8BT [Occ=Once!] :: Int64)
                 (w1_s8BU [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_s8BT of _ [Occ=Dead] { I64# ww1_s8BX [Occ=Once] ->
                 $wa4 ww1_s8BX w1_s8BU
                 }}]
main16 =
  \ (w_s8BT :: Int64)
    (w1_s8BU [OS=OneShot] :: State# RealWorld) ->
    case w_s8BT of _ [Occ=Dead] { I64# ww1_s8BX ->
    $wa4 ww1_s8BX w1_s8BU
    }

main15 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main15 =
  Criterion.Types.Benchmark
    main17
    (main16
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                ~R# Benchmarkable))

main14 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main14 = unpackCString# "psum2"#

$wgo [InlPrag=[0], Occ=LoopBreaker]
  :: [Int] -> Int# -> Int#

$wgo =
  \ (w_s8C0 :: [Int]) (ww_s8C4 :: Int#) ->
    case w_s8C0 of _ [Occ=Dead] {
      [] -> ww_s8C4;
      : y_a7h8 ys_a7h9 ->
        case y_a7h8 of _ [Occ=Dead] { I# y1_a7Aj ->
        $wgo ys_a7h9 (+# ww_s8C4 y1_a7Aj)
        }
    }

main_eta1 [InlPrag=INLINE[0]] :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8Ca [Occ=Once] :: [Int]) ->
                 case $wgo w_s8Ca 0 of ww_s8Cd { __DEFAULT ->
                 I# ww_s8Cd
                 }}]
main_eta1 =
  \ (w_s8Ca :: [Int]) ->
    case $wgo w_s8Ca 0 of ww_s8Cd { __DEFAULT ->
    I# ww_s8Cd
    }

$wa3 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa3 =
  \ (w_s8Cf :: [Int] -> Int)
    (w1_s8Cg :: [Int])
    (ww_s8Cl :: Int#)
    (w2_s8Ci [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s8Cl 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s8Cf w1_s8Cg of _ [Occ=Dead] { I# ipv_a8oz ->
                ()
                })
               w2_s8Ci
        of _ [Occ=Dead] { (# ipv_a8oq, ipv1_a8or #) ->
        $wa3 w_s8Cf w1_s8Cg (-# ww_s8Cl 1) ipv_a8oq
        };
      True -> (# w2_s8Ci, () #)
    }

$wa2 [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wa2 =
  \ (ww_s8Cs :: Int#)
    (w_s8Cp [OS=OneShot] :: State# RealWorld) ->
    $wa3 main_eta1 myList ww_s8Cs w_s8Cp

main13 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8Co [Occ=Once!] :: Int64)
                 (w1_s8Cp [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_s8Co of _ [Occ=Dead] { I64# ww1_s8Cs [Occ=Once] ->
                 $wa2 ww1_s8Cs w1_s8Cp
                 }}]
main13 =
  \ (w_s8Co :: Int64)
    (w1_s8Cp [OS=OneShot] :: State# RealWorld) ->
    case w_s8Co of _ [Occ=Dead] { I64# ww1_s8Cs ->
    $wa2 ww1_s8Cs w1_s8Cp
    }

main12 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main12 =
  Criterion.Types.Benchmark
    main14
    (main13
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                ~R# Benchmarkable))

main11 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main11 = unpackCString# "P.sum"#

$wa1 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa1 =
  \ (w_s8Cv :: [Int] -> Int)
    (w1_s8Cw :: [Int])
    (ww_s8CB :: Int#)
    (w2_s8Cy [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s8CB 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s8Cv w1_s8Cw of _ [Occ=Dead] { I# ipv_a8oz ->
                ()
                })
               w2_s8Cy
        of _ [Occ=Dead] { (# ipv_a8oq, ipv1_a8or #) ->
        $wa1 w_s8Cv w1_s8Cw (-# ww_s8CB 1) ipv_a8oq
        };
      True -> (# w2_s8Cy, () #)
    }

$wa [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wa =
  \ (ww_s8CI :: Int#)
    (w_s8CF [OS=OneShot] :: State# RealWorld) ->
    $wa1 main_eta myList ww_s8CI w_s8CF

main9 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8CE [Occ=Once!] :: Int64)
                 (w1_s8CF [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_s8CE of _ [Occ=Dead] { I64# ww1_s8CI [Occ=Once] ->
                 $wa ww1_s8CI w1_s8CF
                 }}]
main9 =
  \ (w_s8CE :: Int64)
    (w1_s8CF [OS=OneShot] :: State# RealWorld) ->
    case w_s8CE of _ [Occ=Dead] { I64# ww1_s8CI ->
    $wa ww1_s8CI w1_s8CF
    }

main8 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main8 =
  Criterion.Types.Benchmark
    main11
    (main9
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                ~R# Benchmarkable))

main7 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main7 =
  : @ Benchmark main8 ([] @ Benchmark)

main6 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main6 = : @ Benchmark main12 main7

main5 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main5 = : @ Benchmark main15 main6

main4 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main4 = : @ Benchmark main18 main5

main3 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main3 = Criterion.Types.BenchGroup main21 main4

main2 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main2 =
  : @ Benchmark main3 ([] @ Benchmark)

main1
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
main1 = Criterion.defaultMain2 defaultConfig main2

main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main1
               `cast` (Sym (NTCo:IO[0] <()>_R)
                       :: (State# RealWorld
                           -> (# State# RealWorld, () #))
                          ~R# IO ())}]
main =
  main1
  `cast` (Sym (NTCo:IO[0] <()>_R)
          :: (State# RealWorld
              -> (# State# RealWorld, () #))
             ~R# IO ())

main22
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main22 =
  runMainIO1
    @ ()
    (main1
     `cast` (Sym (NTCo:IO[0] <()>_R)
             :: (State# RealWorld
                 -> (# State# RealWorld, () #))
                ~R# IO ()))

:main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main22
               `cast` (Sym (NTCo:IO[0] <()>_R)
                       :: (State# RealWorld
                           -> (# State# RealWorld, () #))
                          ~R# IO ())}]
:main =
  main22
  `cast` (Sym (NTCo:IO[0] <()>_R)
          :: (State# RealWorld
              -> (# State# RealWorld, () #))
             ~R# IO ())

==================== Asm code ====================
.data
	.align 3
.align 0
.globl __stginit_main@main:Main
__stginit_main@main:Main:

==================== Asm code ====================
.data
	.align 3
.align 0
.globl myList_closure
myList_closure:
	.quad	myList_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.text
	.align 3
myList_info_dsp:
.text
	.align 3
	.quad	0
	.quad	22
.globl myList_info
myList_info:
_c8HC:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8HD
_c8HE:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8HB
_c8HA:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $10000,%edi
	movl $2,%esi
	movl $1,%r14d
	addq $-16,%rbp
	jmp efdtInt_info
_c8HB:
	jmp *(%rbx)
_c8HD:
	jmp *-16(%r13)
	.long  myList_info - myList_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main21_closure
main21_closure:
	.quad	main21_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
	.align 3
.align 0
c8HR_str:
	.byte	97
	.byte	118
	.byte	103
	.byte	83
	.byte	105
	.byte	109
	.byte	112
	.byte	108
	.byte	0

==================== Asm code ====================
.text
	.align 3
main21_info_dsp:
.text
	.align 3
	.quad	0
	.quad	22
.globl main21_info
main21_info:
_c8HS:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8HT
_c8HU:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8HQ
_c8HP:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c8HR_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c8HQ:
	jmp *(%rbx)
_c8HT:
	jmp *-16(%r13)
	.long  main21_info - main21_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main20_closure
main20_closure:
	.quad	main20_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
	.align 3
.align 0
c8I8_str:
	.byte	102
	.byte	115
	.byte	117
	.byte	109
	.byte	50
	.byte	0

==================== Asm code ====================
.text
	.align 3
main20_info_dsp:
.text
	.align 3
	.quad	0
	.quad	22
.globl main20_info
main20_info:
_c8I9:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Ia
_c8Ib:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8I7
_c8I6:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c8I8_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c8I7:
	jmp *(%rbx)
_c8Ia:
	jmp *-16(%r13)
	.long  main20_info - main20_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl $wgo1_closure
$wgo1_closure:
	.quad	$wgo1_info

==================== Asm code ====================
.text
	.align 3
$wgo1_info_dsp:
.text
	.align 3
	.quad	8589934606
	.quad	0
	.quad	15
.globl $wgo1_info
$wgo1_info:
_c8IJ:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jae _c8Iw
_c8IK:
	leaq $wgo1_closure(%rip),%rbx
	jmp *-8(%r13)
.text
	.align 3
	.quad	130
	.quad	32
block_c8IR_info:
_c8IR:
	leaq 7(%rbx),%rax
	movq 16(%rbp),%rbx
	addq (%rax),%rbx
	movq 8(%rbp),%rax
	addq $24,%rbp
_n8Ja:
	movq %rbx,%rsi
	movq %rax,%r14
_c8Iw:
	leaq block_c8Iz_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %r14,%rbx
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	testb $7,%bl
	jne _c8Iz
_c8IA:
	jmp *(%rbx)
.text
	.align 3
	.quad	65
	.quad	32
block_c8Iz_info:
_c8Iz:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $2,%rax
	jae _c8IH
_c8II:
	movq 8(%rbp),%rbx
	addq $16,%rbp
	jmp *(%rbp)
_c8IH:
	leaq block_c8IR_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testb $7,%bl
	jne _c8IR
_c8IT:
	jmp *(%rbx)
	.long  $wgo1_info - $wgo1_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main_eta2_closure
main_eta2_closure:
	.quad	main_eta2_info

==================== Asm code ====================
.text
	.align 3
main_eta2_info_dsp:
.text
	.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta2_info
main_eta2_info:
_c8Jl:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Jp
_c8Jq:
	leaq block_c8Jj_info(%rip),%rax
	movq %rax,-8(%rbp)
	xorl %esi,%esi
	addq $-8,%rbp
	jmp $wgo1_info
.text
	.align 3
	.quad	0
	.quad	32
block_c8Jj_info:
_c8Jj:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _c8Jt
_c8Js:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c8Jp:
	leaq main_eta2_closure(%rip),%rbx
	jmp *-8(%r13)
_c8Jt:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
	.long  main_eta2_info - main_eta2_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl $wa7_closure
$wa7_closure:
	.quad	$wa7_info

==================== Asm code ====================
.text
	.align 3
sat_s8Gg_info_dsp:
.text
	.align 3
	.quad	2
	.quad	19
sat_s8Gg_info:
_c8K7:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8K8
_c8K9:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c8K5_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
	.align 3
	.quad	0
	.quad	32
block_c8K5_info:
_c8K5:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c8K8:
	jmp *-16(%r13)
	.long  sat_s8Gg_info - sat_s8Gg_info_dsp

==================== Asm code ====================
.text
	.align 3
$wa7_info_dsp:
.text
	.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa7_info
$wa7_info:
_c8Kd:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Ke
_c8Kf:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c8Kh
_c8Kg:
	testq %rdi,%rdi
	jle _c8Kq
_c8Kr:
	leaq sat_s8Gg_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c8Ki_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _c8Ki
_c8Kl:
	jmp *(%rbx)
_c8Kh:
	movq $32,904(%r13)
_c8Ke:
	leaq $wa7_closure(%rip),%rbx
	jmp *-8(%r13)
.text
	.align 3
	.quad	259
	.quad	32
block_c8Ki_info:
_c8Ki:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa7_info
_c8Kq:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
	.long  $wa7_info - $wa7_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl $wa6_closure
$wa6_closure:
	.quad	$wa6_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
$wa6_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-($wa6_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wa6_info
$wa6_info:
_c8KK:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta2_closure+1(%rip),%r14
	jmp $wa7_info
	.long  $wa6_info - $wa6_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main19_closure
main19_closure:
	.quad	main19_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
main19_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-(main19_info)+8
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main19_info
main19_info:
_c8L2:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c8L3
_c8L4:
	leaq block_c8KZ_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _c8KZ
_c8L0:
	jmp *(%rbx)
.text
	.align 3
	.quad	S8KN_srt-(block_c8KZ_info)+8
	.quad	0
	.quad	4294967328
block_c8KZ_info:
_c8KZ:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wa6_info
_c8L3:
	leaq main19_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main19_info - main19_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main18_closure
main18_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main20_closure
	.quad	main19_closure+2
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main17_closure
main17_closure:
	.quad	main17_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
	.align 3
.align 0
c8Lm_str:
	.byte	102
	.byte	115
	.byte	117
	.byte	109
	.byte	49
	.byte	0

==================== Asm code ====================
.text
	.align 3
main17_info_dsp:
.text
	.align 3
	.quad	0
	.quad	22
.globl main17_info
main17_info:
_c8Ln:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Lo
_c8Lp:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8Ll
_c8Lk:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c8Lm_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c8Ll:
	jmp *(%rbx)
_c8Lo:
	jmp *-16(%r13)
	.long  main17_info - main17_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main10_closure
main10_closure:
	.quad	I#_static_info
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main_eta_closure
main_eta_closure:
	.quad	main_eta_info

==================== Asm code ====================
.text
	.align 3
main_eta_info_dsp:
.text
	.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta_info
main_eta_info:
_c8LD:
	movq %r14,%rdi
	leaq main10_closure+1(%rip),%rsi
	leaq $fNumInt_$c+_closure+2(%rip),%r14
	jmp foldl_info
	.long  main_eta_info - main_eta_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl $wa5_closure
$wa5_closure:
	.quad	$wa5_info

==================== Asm code ====================
.text
	.align 3
sat_s8Gz_info_dsp:
.text
	.align 3
	.quad	2
	.quad	19
sat_s8Gz_info:
_c8Mg:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Mh
_c8Mi:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c8Me_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
	.align 3
	.quad	0
	.quad	32
block_c8Me_info:
_c8Me:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c8Mh:
	jmp *-16(%r13)
	.long  sat_s8Gz_info - sat_s8Gz_info_dsp

==================== Asm code ====================
.text
	.align 3
$wa5_info_dsp:
.text
	.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa5_info
$wa5_info:
_c8Mm:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Mn
_c8Mo:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c8Mq
_c8Mp:
	testq %rdi,%rdi
	jle _c8Mz
_c8MA:
	leaq sat_s8Gz_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c8Mr_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _c8Mr
_c8Mu:
	jmp *(%rbx)
_c8Mq:
	movq $32,904(%r13)
_c8Mn:
	leaq $wa5_closure(%rip),%rbx
	jmp *-8(%r13)
.text
	.align 3
	.quad	259
	.quad	32
block_c8Mr_info:
_c8Mr:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa5_info
_c8Mz:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
	.long  $wa5_info - $wa5_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl $wa4_closure
$wa4_closure:
	.quad	$wa4_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
$wa4_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-($wa4_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wa4_info
$wa4_info:
_c8MT:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta_closure+1(%rip),%r14
	jmp $wa5_info
	.long  $wa4_info - $wa4_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main16_closure
main16_closure:
	.quad	main16_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
main16_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-(main16_info)+24
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main16_info
main16_info:
_c8Na:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Nb
_c8Nc:
	leaq block_c8N7_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _c8N7
_c8N8:
	jmp *(%rbx)
.text
	.align 3
	.quad	S8KN_srt-(block_c8N7_info)+24
	.quad	0
	.quad	4294967328
block_c8N7_info:
_c8N7:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wa4_info
_c8Nb:
	leaq main16_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main16_info - main16_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main15_closure
main15_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main17_closure
	.quad	main16_closure+2
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main14_closure
main14_closure:
	.quad	main14_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
	.align 3
.align 0
c8Nu_str:
	.byte	112
	.byte	115
	.byte	117
	.byte	109
	.byte	50
	.byte	0

==================== Asm code ====================
.text
	.align 3
main14_info_dsp:
.text
	.align 3
	.quad	0
	.quad	22
.globl main14_info
main14_info:
_c8Nv:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Nw
_c8Nx:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8Nt
_c8Ns:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c8Nu_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c8Nt:
	jmp *(%rbx)
_c8Nw:
	jmp *-16(%r13)
	.long  main14_info - main14_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl $wgo_closure
$wgo_closure:
	.quad	$wgo_info

==================== Asm code ====================
.text
	.align 3
$wgo_info_dsp:
.text
	.align 3
	.quad	8589934606
	.quad	0
	.quad	15
.globl $wgo_info
$wgo_info:
_c8O5:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jae _c8NS
_c8O6:
	leaq $wgo_closure(%rip),%rbx
	jmp *-8(%r13)
.text
	.align 3
	.quad	130
	.quad	32
block_c8Od_info:
_c8Od:
	leaq 7(%rbx),%rax
	movq 16(%rbp),%rbx
	addq (%rax),%rbx
	movq 8(%rbp),%rax
	addq $24,%rbp
_n8Ow:
	movq %rbx,%rsi
	movq %rax,%r14
_c8NS:
	leaq block_c8NV_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %r14,%rbx
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	testb $7,%bl
	jne _c8NV
_c8NW:
	jmp *(%rbx)
.text
	.align 3
	.quad	65
	.quad	32
block_c8NV_info:
_c8NV:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $2,%rax
	jae _c8O3
_c8O4:
	movq 8(%rbp),%rbx
	addq $16,%rbp
	jmp *(%rbp)
_c8O3:
	leaq block_c8Od_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testb $7,%bl
	jne _c8Od
_c8Of:
	jmp *(%rbx)
	.long  $wgo_info - $wgo_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main_eta1_closure
main_eta1_closure:
	.quad	main_eta1_info

==================== Asm code ====================
.text
	.align 3
main_eta1_info_dsp:
.text
	.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta1_info
main_eta1_info:
_c8OH:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c8OL
_c8OM:
	leaq block_c8OF_info(%rip),%rax
	movq %rax,-8(%rbp)
	xorl %esi,%esi
	addq $-8,%rbp
	jmp $wgo_info
.text
	.align 3
	.quad	0
	.quad	32
block_c8OF_info:
_c8OF:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _c8OP
_c8OO:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c8OL:
	leaq main_eta1_closure(%rip),%rbx
	jmp *-8(%r13)
_c8OP:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
	.long  main_eta1_info - main_eta1_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl $wa3_closure
$wa3_closure:
	.quad	$wa3_info

==================== Asm code ====================
.text
	.align 3
sat_s8H2_info_dsp:
.text
	.align 3
	.quad	2
	.quad	19
sat_s8H2_info:
_c8Pt:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Pu
_c8Pv:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c8Pr_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
	.align 3
	.quad	0
	.quad	32
block_c8Pr_info:
_c8Pr:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c8Pu:
	jmp *-16(%r13)
	.long  sat_s8H2_info - sat_s8H2_info_dsp

==================== Asm code ====================
.text
	.align 3
$wa3_info_dsp:
.text
	.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa3_info
$wa3_info:
_c8Pz:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c8PA
_c8PB:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c8PD
_c8PC:
	testq %rdi,%rdi
	jle _c8PM
_c8PN:
	leaq sat_s8H2_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c8PE_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _c8PE
_c8PH:
	jmp *(%rbx)
_c8PD:
	movq $32,904(%r13)
_c8PA:
	leaq $wa3_closure(%rip),%rbx
	jmp *-8(%r13)
.text
	.align 3
	.quad	259
	.quad	32
block_c8PE_info:
_c8PE:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa3_info
_c8PM:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
	.long  $wa3_info - $wa3_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl $wa2_closure
$wa2_closure:
	.quad	$wa2_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
$wa2_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-($wa2_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wa2_info
$wa2_info:
_c8Q6:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta1_closure+1(%rip),%r14
	jmp $wa3_info
	.long  $wa2_info - $wa2_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main13_closure
main13_closure:
	.quad	main13_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
main13_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-(main13_info)+40
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main13_info
main13_info:
_c8Qn:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Qo
_c8Qp:
	leaq block_c8Qk_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _c8Qk
_c8Ql:
	jmp *(%rbx)
.text
	.align 3
	.quad	S8KN_srt-(block_c8Qk_info)+40
	.quad	0
	.quad	4294967328
block_c8Qk_info:
_c8Qk:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wa2_info
_c8Qo:
	leaq main13_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main13_info - main13_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main12_closure
main12_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main14_closure
	.quad	main13_closure+2
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main11_closure
main11_closure:
	.quad	main11_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
	.align 3
.align 0
c8QH_str:
	.byte	80
	.byte	46
	.byte	115
	.byte	117
	.byte	109
	.byte	0

==================== Asm code ====================
.text
	.align 3
main11_info_dsp:
.text
	.align 3
	.quad	0
	.quad	22
.globl main11_info
main11_info:
_c8QI:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8QJ
_c8QK:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8QG
_c8QF:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c8QH_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c8QG:
	jmp *(%rbx)
_c8QJ:
	jmp *-16(%r13)
	.long  main11_info - main11_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl $wa1_closure
$wa1_closure:
	.quad	$wa1_info

==================== Asm code ====================
.text
	.align 3
sat_s8Hl_info_dsp:
.text
	.align 3
	.quad	2
	.quad	19
sat_s8Hl_info:
_c8Ro:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Rp
_c8Rq:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c8Rm_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
	.align 3
	.quad	0
	.quad	32
block_c8Rm_info:
_c8Rm:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c8Rp:
	jmp *-16(%r13)
	.long  sat_s8Hl_info - sat_s8Hl_info_dsp

==================== Asm code ====================
.text
	.align 3
$wa1_info_dsp:
.text
	.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa1_info
$wa1_info:
_c8Ru:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Rv
_c8Rw:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c8Ry
_c8Rx:
	testq %rdi,%rdi
	jle _c8RH
_c8RI:
	leaq sat_s8Hl_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c8Rz_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _c8Rz
_c8RC:
	jmp *(%rbx)
_c8Ry:
	movq $32,904(%r13)
_c8Rv:
	leaq $wa1_closure(%rip),%rbx
	jmp *-8(%r13)
.text
	.align 3
	.quad	259
	.quad	32
block_c8Rz_info:
_c8Rz:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa1_info
_c8RH:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
	.long  $wa1_info - $wa1_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl $wa_closure
$wa_closure:
	.quad	$wa_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
$wa_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-($wa_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wa_info
$wa_info:
_c8S1:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta_closure+1(%rip),%r14
	jmp $wa1_info
	.long  $wa_info - $wa_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main9_closure
main9_closure:
	.quad	main9_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
main9_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-(main9_info)+56
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main9_info
main9_info:
_c8Si:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Sj
_c8Sk:
	leaq block_c8Sf_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _c8Sf
_c8Sg:
	jmp *(%rbx)
.text
	.align 3
	.quad	S8KN_srt-(block_c8Sf_info)+56
	.quad	0
	.quad	4294967328
block_c8Sf_info:
_c8Sf:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wa_info
_c8Sj:
	leaq main9_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main9_info - main9_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main8_closure
main8_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main11_closure
	.quad	main9_closure+2
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main7_closure
main7_closure:
	.quad	:_static_info
	.quad	main8_closure+2
	.quad	[]_closure+1
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main6_closure
main6_closure:
	.quad	:_static_info
	.quad	main12_closure+2
	.quad	main7_closure+2
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main5_closure
main5_closure:
	.quad	:_static_info
	.quad	main15_closure+2
	.quad	main6_closure+2
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main4_closure
main4_closure:
	.quad	:_static_info
	.quad	main18_closure+2
	.quad	main5_closure+2
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main3_closure
main3_closure:
	.quad	Criterion.Types.BenchGroup_static_info
	.quad	main21_closure
	.quad	main4_closure+2
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main2_closure
main2_closure:
	.quad	:_static_info
	.quad	main3_closure+3
	.quad	[]_closure+1
	.quad	0

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main1_closure
main1_closure:
	.quad	main1_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
main1_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-(main1_info)+72
	.quad	4294967299
	.quad	0
	.quad	30064771087
.globl main1_info
main1_info:
_c8SM:
	leaq main2_closure+2(%rip),%rsi
	leaq Criterion.Options.defaultConfig_closure(%rip),%r14
	jmp Criterion.defaultMain2_info
	.long  main1_info - main1_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main_closure
main_closure:
	.quad	main_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
main_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-(main_info)+96
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl main_info
main_info:
_c8SX:
	jmp main1_info
	.long  main_info - main_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl main22_closure
main22_closure:
	.quad	main22_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
main22_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-(main22_info)+96
	.quad	4294967299
	.quad	0
	.quad	12884901903
.globl main22_info
main22_info:
_c8T8:
	leaq main1_closure+1(%rip),%r14
	jmp runMainIO1_info
	.long  main22_info - main22_info_dsp

==================== Asm code ====================
.data
	.align 3
.align 0
.globl :main_closure
:main_closure:
	.quad	:main_info
	.quad	0

==================== Asm code ====================
.text
	.align 3
:main_info_dsp:
.text
	.align 3
	.quad	S8KN_srt-(:main_info)+112
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl :main_info
:main_info:
_c8Tj:
	jmp main22_info
	.long  :main_info - :main_info_dsp

==================== Asm code ====================
.const_data
	.align 3
.align 0
S8KN_srt:
	.quad	myList_closure
	.quad	$wa6_closure
	.quad	main19_closure
	.quad	$wa4_closure
	.quad	main16_closure
	.quad	$wa2_closure
	.quad	main13_closure
	.quad	$wa_closure
	.quad	main9_closure
	.quad	Criterion.defaultMain2_closure
	.quad	Criterion.Options.defaultConfig_closure
	.quad	main2_closure
	.quad	main1_closure
	.quad	runMainIO1_closure
	.quad	main22_closure

Linking BenchSum ...


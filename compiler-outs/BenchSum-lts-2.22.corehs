$ stack --resolver lts-2.22 exec -- ghc-core --no-syntax -- -O BenchSum.hs
[1 of 1] Compiling Main             ( BenchSum.hs, BenchSum.o )

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 343, types: 327, coercions: 41}

myList :: [Int]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 40 0}]
myList = efdtInt 1 2 10000

main20 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 50 0}]
main20 = unpackCString# "avgSimpl"#

main19 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 50 0}]
main19 = unpackCString# "fsum2"#

$wlgo3 [Occ=LoopBreaker]
  :: Int# -> [Int] -> Int#

$wlgo3 =
  \ (ww_s7ku :: Int#) (w_s7kr :: [Int]) ->
    case w_s7kr of _ [Occ=Dead] {
      [] -> ww_s7ku;
      : x_a5lA xs_a5lB ->
        case x_a5lA of _ [Occ=Dead] { I# y_a5lk ->
        $wlgo3 (+# ww_s7ku y_a5lk) xs_a5lB
        }
    }

main_eta3 [InlPrag=INLINE[0]]
  :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7kA [Occ=Once] :: [Int]) ->
                 case $wlgo3 0 w_s7kA of ww_s7kD { __DEFAULT ->
                 I# ww_s7kD
                 }}]
main_eta3 =
  \ (w_s7kA :: [Int]) ->
    case $wlgo3 0 w_s7kA of ww_s7kD { __DEFAULT ->
    I# ww_s7kD
    }

$wa3 [Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa3 =
  \ (w_s7kF :: [Int] -> Int)
    (w1_s7kG :: [Int])
    (ww_s7kL :: Int#)
    (w2_s7kI :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s7kL 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s7kF w1_s7kG of _ [Occ=Dead] { I# ipv_a5pg ->
                ()
                })
               w2_s7kI
        of _ [Occ=Dead] { (# ipv_a5p7, ipv1_a5p8 #) ->
        $wa3 w_s7kF w1_s7kG (-# ww_s7kL 1) ipv_a5p7
        };
      True -> (# w2_s7kI, () #)
    }

main18
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=2, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 0] 50 0}]
main18 =
  \ (eta2_a4F5 :: Int64)
    (eta3_a4Uv :: State# RealWorld) ->
    case eta2_a4F5 of _ [Occ=Dead] { I64# ww1_s7kL ->
    $wa3 main_eta3 myList ww1_s7kL eta3_a4Uv
    }

main17 :: Criterion.Types.Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main17 =
  Criterion.Types.Benchmark
    main19
    (main18
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                  ~#
                Criterion.Types.Benchmarkable))

main16 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 50 0}]
main16 = unpackCString# "fsum1"#

$wlgo2 [Occ=LoopBreaker]
  :: Int# -> [Int] -> Int#

$wlgo2 =
  \ (ww_s7kS :: Int#) (w_s7kP :: [Int]) ->
    case w_s7kP of _ [Occ=Dead] {
      [] -> ww_s7kS;
      : x_a5lA xs_a5lB ->
        case x_a5lA of _ [Occ=Dead] { I# y_a5lk ->
        $wlgo2 (+# ww_s7kS y_a5lk) xs_a5lB
        }
    }

main_eta2 [InlPrag=INLINE[0]]
  :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7kY [Occ=Once] :: [Int]) ->
                 case $wlgo2 0 w_s7kY of ww_s7l1 { __DEFAULT ->
                 I# ww_s7l1
                 }}]
main_eta2 =
  \ (w_s7kY :: [Int]) ->
    case $wlgo2 0 w_s7kY of ww_s7l1 { __DEFAULT ->
    I# ww_s7l1
    }

$wa2 [Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa2 =
  \ (w_s7l3 :: [Int] -> Int)
    (w1_s7l4 :: [Int])
    (ww_s7l9 :: Int#)
    (w2_s7l6 :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s7l9 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s7l3 w1_s7l4 of _ [Occ=Dead] { I# ipv_a5pg ->
                ()
                })
               w2_s7l6
        of _ [Occ=Dead] { (# ipv_a5p7, ipv1_a5p8 #) ->
        $wa2 w_s7l3 w1_s7l4 (-# ww_s7l9 1) ipv_a5p7
        };
      True -> (# w2_s7l6, () #)
    }

main15
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=2, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 0] 50 0}]
main15 =
  \ (eta2_X4G1 :: Int64)
    (eta3_X4Vs :: State# RealWorld) ->
    case eta2_X4G1 of _ [Occ=Dead] { I64# ww1_s7l9 ->
    $wa2 main_eta2 myList ww1_s7l9 eta3_X4Vs
    }

main14 :: Criterion.Types.Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main14 =
  Criterion.Types.Benchmark
    main16
    (main15
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                  ~#
                Criterion.Types.Benchmarkable))

main13 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 50 0}]
main13 = unpackCString# "psum2"#

$wlgo1 [Occ=LoopBreaker]
  :: Int# -> [Int] -> Int#

$wlgo1 =
  \ (ww_s7lg :: Int#) (w_s7ld :: [Int]) ->
    case w_s7ld of _ [Occ=Dead] {
      [] -> ww_s7lg;
      : x_a5lA xs_a5lB ->
        case x_a5lA of _ [Occ=Dead] { I# y_a5lk ->
        $wlgo1 (+# ww_s7lg y_a5lk) xs_a5lB
        }
    }

main_eta1 [InlPrag=INLINE[0]]
  :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7lm [Occ=Once] :: [Int]) ->
                 case $wlgo1 0 w_s7lm of ww_s7lp { __DEFAULT ->
                 I# ww_s7lp
                 }}]
main_eta1 =
  \ (w_s7lm :: [Int]) ->
    case $wlgo1 0 w_s7lm of ww_s7lp { __DEFAULT ->
    I# ww_s7lp
    }

$wa1 [Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa1 =
  \ (w_s7lr :: [Int] -> Int)
    (w1_s7ls :: [Int])
    (ww_s7lx :: Int#)
    (w2_s7lu :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s7lx 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s7lr w1_s7ls of _ [Occ=Dead] { I# ipv_a5pg ->
                ()
                })
               w2_s7lu
        of _ [Occ=Dead] { (# ipv_a5p7, ipv1_a5p8 #) ->
        $wa1 w_s7lr w1_s7ls (-# ww_s7lx 1) ipv_a5p7
        };
      True -> (# w2_s7lu, () #)
    }

main12
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=2, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 0] 50 0}]
main12 =
  \ (eta2_X4Gb :: Int64)
    (eta3_X4VC :: State# RealWorld) ->
    case eta2_X4Gb of _ [Occ=Dead] { I64# ww1_s7lx ->
    $wa1 main_eta1 myList ww1_s7lx eta3_X4VC
    }

main11 :: Criterion.Types.Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main11 =
  Criterion.Types.Benchmark
    main13
    (main12
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                  ~#
                Criterion.Types.Benchmarkable))

main10 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 50 0}]
main10 = unpackCString# "P.sum"#

$wlgo [Occ=LoopBreaker]
  :: Int# -> [Int] -> Int#

$wlgo =
  \ (ww_s7lE :: Int#) (w_s7lB :: [Int]) ->
    case w_s7lB of _ [Occ=Dead] {
      [] -> ww_s7lE;
      : x_a5lA xs_a5lB ->
        case x_a5lA of _ [Occ=Dead] { I# y_a5lk ->
        $wlgo (+# ww_s7lE y_a5lk) xs_a5lB
        }
    }

main_eta [InlPrag=INLINE[0]]
  :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7lK [Occ=Once] :: [Int]) ->
                 case $wlgo 0 w_s7lK of ww_s7lN { __DEFAULT ->
                 I# ww_s7lN
                 }}]
main_eta =
  \ (w_s7lK :: [Int]) ->
    case $wlgo 0 w_s7lK of ww_s7lN { __DEFAULT ->
    I# ww_s7lN
    }

$wa [Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa =
  \ (w_s7lP :: [Int] -> Int)
    (w1_s7lQ :: [Int])
    (ww_s7lV :: Int#)
    (w2_s7lS :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s7lV 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s7lP w1_s7lQ of _ [Occ=Dead] { I# ipv_a5pg ->
                ()
                })
               w2_s7lS
        of _ [Occ=Dead] { (# ipv_a5p7, ipv1_a5p8 #) ->
        $wa w_s7lP w1_s7lQ (-# ww_s7lV 1) ipv_a5p7
        };
      True -> (# w2_s7lS, () #)
    }

main9
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=2, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 0] 50 0}]
main9 =
  \ (eta2_X4Gl :: Int64)
    (eta3_X4VM :: State# RealWorld) ->
    case eta2_X4Gl of _ [Occ=Dead] { I64# ww1_s7lV ->
    $wa main_eta myList ww1_s7lV eta3_X4VM
    }

main8 :: Criterion.Types.Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main8 =
  Criterion.Types.Benchmark
    main10
    (main9
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                  ~#
                Criterion.Types.Benchmarkable))

main7 :: [Criterion.Types.Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main7 =
  :
    @ Criterion.Types.Benchmark
    main8
    ([] @ Criterion.Types.Benchmark)

main6 :: [Criterion.Types.Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main6 =
  : @ Criterion.Types.Benchmark main11 main7

main5 :: [Criterion.Types.Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main5 =
  : @ Criterion.Types.Benchmark main14 main6

main4 :: [Criterion.Types.Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main4 =
  : @ Criterion.Types.Benchmark main17 main5

main3 :: Criterion.Types.Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main3 = Criterion.Types.BenchGroup main20 main4

main2 :: [Criterion.Types.Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main2 =
  :
    @ Criterion.Types.Benchmark
    main3
    ([] @ Criterion.Types.Benchmark)

main1
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0] 30 0}]
main1 =
  \ (eta_B1 :: State# RealWorld) ->
    Criterion.defaultMain2
      Criterion.Options.defaultConfig main2 eta_B1

main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
main =
  main1
  `cast` (Sym (NTCo:IO[0] <()>_R)
          :: (State# RealWorld
              -> (# State# RealWorld, () #))
               ~#
             IO ())

main21
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
main21 =
  \ (eta_B1 :: State# RealWorld) ->
    runMainIO1
      @ ()
      (main1
       `cast` (Sym (NTCo:IO[0] <()>_R)
               :: (State# RealWorld
                   -> (# State# RealWorld, () #))
                    ~#
                  IO ()))
      eta_B1

:main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
:main =
  main21
  `cast` (Sym (NTCo:IO[0] <()>_R)
          :: (State# RealWorld
              -> (# State# RealWorld, () #))
               ~#
             IO ())

==================== Asm code ====================
.data
.align 3
.align 0
.globl __stginit_main:Main
__stginit_main:Main:
.data
.align 3
.align 0
.globl myList_closure
myList_closure:
	.quad	myList_info
	.quad	0
	.quad	0
	.quad	0
.text
.align 3
myList_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl myList_info
myList_info:
_c7s4:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7s5
_c7s6:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7s3
_c7s2:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $10000,%edi
	movl $2,%esi
	movl $1,%r14d
	addq $-16,%rbp
	jmp efdtInt_info
_c7s3:
	jmp *(%rbx)
_c7s5:
	jmp *-16(%r13)
	.long  myList_info - myList_info_dsp
.data
.align 3
.align 0
.globl main20_closure
main20_closure:
	.quad	main20_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
c7sj_str:
	.byte	97
	.byte	118
	.byte	103
	.byte	83
	.byte	105
	.byte	109
	.byte	112
	.byte	108
	.byte	0
.text
.align 3
main20_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl main20_info
main20_info:
_c7sk:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7sl
_c7sm:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7si
_c7sh:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c7sj_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c7si:
	jmp *(%rbx)
_c7sl:
	jmp *-16(%r13)
	.long  main20_info - main20_info_dsp
.data
.align 3
.align 0
.globl main19_closure
main19_closure:
	.quad	main19_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
c7sA_str:
	.byte	102
	.byte	115
	.byte	117
	.byte	109
	.byte	50
	.byte	0
.text
.align 3
main19_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl main19_info
main19_info:
_c7sB:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7sC
_c7sD:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7sz
_c7sy:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c7sA_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c7sz:
	jmp *(%rbx)
_c7sC:
	jmp *-16(%r13)
	.long  main19_info - main19_info_dsp
.data
.align 3
.align 0
.globl $wlgo3_closure
$wlgo3_closure:
	.quad	$wlgo3_info
.text
.align 3
$wlgo3_info_dsp:
.text
.align 3
	.quad	8589934605
	.quad	0
	.quad	15
.globl $wlgo3_info
$wlgo3_info:
_c7tb:
_c7sZ:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7to
_c7tp:
	leaq block_c7t1_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rsi,%rbx
	movq %r14,-8(%rbp)
	addq $-16,%rbp
	testq $7,%rbx
	jne _c7t1
_c7t2:
	jmp *(%rbx)
.text
.align 3
	.quad	130
	.quad	32
block_c7tf_info:
_c7tf:
	movq 8(%rbp),%rax
	addq $7,%rbx
	movq 16(%rbp),%rcx
	addq (%rbx),%rcx
	addq $24,%rbp
_n7tC:
	movq %rcx,%r14
	movq %rax,%rsi
	jmp _c7sZ
.text
.align 3
	.quad	65
	.quad	32
block_c7t1_info:
_c7t1:
	movq %rbx,%rax
	andq $7,%rax
	cmpq $2,%rax
	jae _c7t9
_c7ta:
	movq 8(%rbp),%rbx
	addq $16,%rbp
	jmp *(%rbp)
_c7t9:
	leaq block_c7tf_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7tf
_c7tg:
	jmp *(%rbx)
_c7to:
	leaq $wlgo3_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wlgo3_info - $wlgo3_info_dsp
.data
.align 3
.align 0
.globl main_eta3_closure
main_eta3_closure:
	.quad	main_eta3_info
.text
.align 3
main_eta3_info_dsp:
.text
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta3_info
main_eta3_info:
_c7tN:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7tU
_c7tV:
	leaq block_c7tL_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rsi
	xorl %r14d,%r14d
	addq $-8,%rbp
	jmp $wlgo3_info
.text
.align 3
	.quad	0
	.quad	32
block_c7tL_info:
_c7tL:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _c7tT
_c7tS:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7tT:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
_c7tU:
	leaq main_eta3_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main_eta3_info - main_eta3_info_dsp
.data
.align 3
.align 0
.globl $wa3_closure
$wa3_closure:
	.quad	$wa3_info
.text
.align 3
sat_s7qu_info_dsp:
.text
.align 3
	.quad	2
	.quad	19
sat_s7qu_info:
_c7uz:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7uD
_c7uE:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c7ux_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
.align 3
	.quad	0
	.quad	32
block_c7ux_info:
_c7ux:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7uD:
	jmp *-16(%r13)
	.long  sat_s7qu_info - sat_s7qu_info_dsp
.text
.align 3
$wa3_info_dsp:
.text
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa3_info
$wa3_info:
_c7uF:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c7uN
_c7uO:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c7uT
_c7uP:
	testq %rdi,%rdi
	jle _c7uL
_c7uM:
	leaq sat_s7qu_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c7uG_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testq $7,%rbx
	jne _c7uG
_c7uQ:
	jmp *(%rbx)
.text
.align 3
	.quad	259
	.quad	32
block_c7uG_info:
_c7uG:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa3_info
_c7uL:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
_c7uT:
	movq $32,904(%r13)
_c7uN:
	leaq $wa3_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wa3_info - $wa3_info_dsp
.data
.align 3
.align 0
.globl main18_closure
main18_closure:
	.quad	main18_info
	.quad	0
.text
.align 3
main18_info_dsp:
.text
.align 3
	.quad	S7vo_srt-(main18_info)+0
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main18_info
main18_info:
_c7vi:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7vm
_c7vn:
	leaq block_c7vf_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7vf
_c7vg:
	jmp *(%rbx)
.text
.align 3
	.quad	S7vo_srt-(block_c7vf_info)+0
	.quad	0
	.quad	4294967328
block_c7vf_info:
_c7vf:
	movq 7(%rbx),%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta3_closure+1(%rip),%r14
	addq $8,%rbp
	jmp $wa3_info
_c7vm:
	leaq main18_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main18_info - main18_info_dsp
.data
.align 3
.align 0
.globl main17_closure
main17_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main19_closure
	.quad	main18_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main16_closure
main16_closure:
	.quad	main16_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
c7vD_str:
	.byte	102
	.byte	115
	.byte	117
	.byte	109
	.byte	49
	.byte	0
.text
.align 3
main16_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl main16_info
main16_info:
_c7vE:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7vF
_c7vG:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7vC
_c7vB:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c7vD_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c7vC:
	jmp *(%rbx)
_c7vF:
	jmp *-16(%r13)
	.long  main16_info - main16_info_dsp
.data
.align 3
.align 0
.globl $wlgo2_closure
$wlgo2_closure:
	.quad	$wlgo2_info
.text
.align 3
$wlgo2_info_dsp:
.text
.align 3
	.quad	8589934605
	.quad	0
	.quad	15
.globl $wlgo2_info
$wlgo2_info:
_c7we:
_c7w2:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7wr
_c7ws:
	leaq block_c7w4_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rsi,%rbx
	movq %r14,-8(%rbp)
	addq $-16,%rbp
	testq $7,%rbx
	jne _c7w4
_c7w5:
	jmp *(%rbx)
.text
.align 3
	.quad	130
	.quad	32
block_c7wi_info:
_c7wi:
	movq 8(%rbp),%rax
	addq $7,%rbx
	movq 16(%rbp),%rcx
	addq (%rbx),%rcx
	addq $24,%rbp
_n7wF:
	movq %rcx,%r14
	movq %rax,%rsi
	jmp _c7w2
.text
.align 3
	.quad	65
	.quad	32
block_c7w4_info:
_c7w4:
	movq %rbx,%rax
	andq $7,%rax
	cmpq $2,%rax
	jae _c7wc
_c7wd:
	movq 8(%rbp),%rbx
	addq $16,%rbp
	jmp *(%rbp)
_c7wc:
	leaq block_c7wi_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7wi
_c7wj:
	jmp *(%rbx)
_c7wr:
	leaq $wlgo2_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wlgo2_info - $wlgo2_info_dsp
.data
.align 3
.align 0
.globl main_eta2_closure
main_eta2_closure:
	.quad	main_eta2_info
.text
.align 3
main_eta2_info_dsp:
.text
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta2_info
main_eta2_info:
_c7wQ:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7wX
_c7wY:
	leaq block_c7wO_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rsi
	xorl %r14d,%r14d
	addq $-8,%rbp
	jmp $wlgo2_info
.text
.align 3
	.quad	0
	.quad	32
block_c7wO_info:
_c7wO:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _c7wW
_c7wV:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7wW:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
_c7wX:
	leaq main_eta2_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main_eta2_info - main_eta2_info_dsp
.data
.align 3
.align 0
.globl $wa2_closure
$wa2_closure:
	.quad	$wa2_info
.text
.align 3
sat_s7qV_info_dsp:
.text
.align 3
	.quad	2
	.quad	19
sat_s7qV_info:
_c7xC:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7xG
_c7xH:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c7xA_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
.align 3
	.quad	0
	.quad	32
block_c7xA_info:
_c7xA:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7xG:
	jmp *-16(%r13)
	.long  sat_s7qV_info - sat_s7qV_info_dsp
.text
.align 3
$wa2_info_dsp:
.text
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa2_info
$wa2_info:
_c7xI:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c7xQ
_c7xR:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c7xW
_c7xS:
	testq %rdi,%rdi
	jle _c7xO
_c7xP:
	leaq sat_s7qV_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c7xJ_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testq $7,%rbx
	jne _c7xJ
_c7xT:
	jmp *(%rbx)
.text
.align 3
	.quad	259
	.quad	32
block_c7xJ_info:
_c7xJ:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa2_info
_c7xO:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
_c7xW:
	movq $32,904(%r13)
_c7xQ:
	leaq $wa2_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wa2_info - $wa2_info_dsp
.data
.align 3
.align 0
.globl main15_closure
main15_closure:
	.quad	main15_info
	.quad	0
.text
.align 3
main15_info_dsp:
.text
.align 3
	.quad	S7vo_srt-(main15_info)+0
	.quad	8589934597
	.quad	0
	.quad	21474836495
.globl main15_info
main15_info:
_c7yl:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7yp
_c7yq:
	leaq block_c7yi_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7yi
_c7yj:
	jmp *(%rbx)
.text
.align 3
	.quad	S7vo_srt-(block_c7yi_info)+0
	.quad	0
	.quad	4294967328
block_c7yi_info:
_c7yi:
	movq 7(%rbx),%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta2_closure+1(%rip),%r14
	addq $8,%rbp
	jmp $wa2_info
_c7yp:
	leaq main15_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main15_info - main15_info_dsp
.data
.align 3
.align 0
.globl main14_closure
main14_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main16_closure
	.quad	main15_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main13_closure
main13_closure:
	.quad	main13_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
c7yF_str:
	.byte	112
	.byte	115
	.byte	117
	.byte	109
	.byte	50
	.byte	0
.text
.align 3
main13_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl main13_info
main13_info:
_c7yG:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7yH
_c7yI:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7yE
_c7yD:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c7yF_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c7yE:
	jmp *(%rbx)
_c7yH:
	jmp *-16(%r13)
	.long  main13_info - main13_info_dsp
.data
.align 3
.align 0
.globl $wlgo1_closure
$wlgo1_closure:
	.quad	$wlgo1_info
.text
.align 3
$wlgo1_info_dsp:
.text
.align 3
	.quad	8589934605
	.quad	0
	.quad	15
.globl $wlgo1_info
$wlgo1_info:
_c7zg:
_c7z4:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7zt
_c7zu:
	leaq block_c7z6_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rsi,%rbx
	movq %r14,-8(%rbp)
	addq $-16,%rbp
	testq $7,%rbx
	jne _c7z6
_c7z7:
	jmp *(%rbx)
.text
.align 3
	.quad	130
	.quad	32
block_c7zk_info:
_c7zk:
	movq 8(%rbp),%rax
	addq $7,%rbx
	movq 16(%rbp),%rcx
	addq (%rbx),%rcx
	addq $24,%rbp
_n7zH:
	movq %rcx,%r14
	movq %rax,%rsi
	jmp _c7z4
.text
.align 3
	.quad	65
	.quad	32
block_c7z6_info:
_c7z6:
	movq %rbx,%rax
	andq $7,%rax
	cmpq $2,%rax
	jae _c7ze
_c7zf:
	movq 8(%rbp),%rbx
	addq $16,%rbp
	jmp *(%rbp)
_c7ze:
	leaq block_c7zk_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7zk
_c7zl:
	jmp *(%rbx)
_c7zt:
	leaq $wlgo1_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wlgo1_info - $wlgo1_info_dsp
.data
.align 3
.align 0
.globl main_eta1_closure
main_eta1_closure:
	.quad	main_eta1_info
.text
.align 3
main_eta1_info_dsp:
.text
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta1_info
main_eta1_info:
_c7zS:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7zZ
_c7A0:
	leaq block_c7zQ_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rsi
	xorl %r14d,%r14d
	addq $-8,%rbp
	jmp $wlgo1_info
.text
.align 3
	.quad	0
	.quad	32
block_c7zQ_info:
_c7zQ:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _c7zY
_c7zX:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7zY:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
_c7zZ:
	leaq main_eta1_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main_eta1_info - main_eta1_info_dsp
.data
.align 3
.align 0
.globl $wa1_closure
$wa1_closure:
	.quad	$wa1_info
.text
.align 3
sat_s7rm_info_dsp:
.text
.align 3
	.quad	2
	.quad	19
sat_s7rm_info:
_c7AE:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7AI
_c7AJ:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c7AC_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
.align 3
	.quad	0
	.quad	32
block_c7AC_info:
_c7AC:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7AI:
	jmp *-16(%r13)
	.long  sat_s7rm_info - sat_s7rm_info_dsp
.text
.align 3
$wa1_info_dsp:
.text
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa1_info
$wa1_info:
_c7AK:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c7AS
_c7AT:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c7AY
_c7AU:
	testq %rdi,%rdi
	jle _c7AQ
_c7AR:
	leaq sat_s7rm_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c7AL_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testq $7,%rbx
	jne _c7AL
_c7AV:
	jmp *(%rbx)
.text
.align 3
	.quad	259
	.quad	32
block_c7AL_info:
_c7AL:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa1_info
_c7AQ:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
_c7AY:
	movq $32,904(%r13)
_c7AS:
	leaq $wa1_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wa1_info - $wa1_info_dsp
.data
.align 3
.align 0
.globl main12_closure
main12_closure:
	.quad	main12_info
	.quad	0
.text
.align 3
main12_info_dsp:
.text
.align 3
	.quad	S7vo_srt-(main12_info)+0
	.quad	8589934597
	.quad	0
	.quad	38654705679
.globl main12_info
main12_info:
_c7Bn:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7Br
_c7Bs:
	leaq block_c7Bk_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7Bk
_c7Bl:
	jmp *(%rbx)
.text
.align 3
	.quad	S7vo_srt-(block_c7Bk_info)+0
	.quad	0
	.quad	4294967328
block_c7Bk_info:
_c7Bk:
	movq 7(%rbx),%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta1_closure+1(%rip),%r14
	addq $8,%rbp
	jmp $wa1_info
_c7Br:
	leaq main12_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main12_info - main12_info_dsp
.data
.align 3
.align 0
.globl main11_closure
main11_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main13_closure
	.quad	main12_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main10_closure
main10_closure:
	.quad	main10_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
c7BH_str:
	.byte	80
	.byte	46
	.byte	115
	.byte	117
	.byte	109
	.byte	0
.text
.align 3
main10_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl main10_info
main10_info:
_c7BI:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7BJ
_c7BK:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7BG
_c7BF:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c7BH_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c7BG:
	jmp *(%rbx)
_c7BJ:
	jmp *-16(%r13)
	.long  main10_info - main10_info_dsp
.data
.align 3
.align 0
.globl $wlgo_closure
$wlgo_closure:
	.quad	$wlgo_info
.text
.align 3
$wlgo_info_dsp:
.text
.align 3
	.quad	8589934605
	.quad	0
	.quad	15
.globl $wlgo_info
$wlgo_info:
_c7Ci:
_c7C6:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7Cv
_c7Cw:
	leaq block_c7C8_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rsi,%rbx
	movq %r14,-8(%rbp)
	addq $-16,%rbp
	testq $7,%rbx
	jne _c7C8
_c7C9:
	jmp *(%rbx)
.text
.align 3
	.quad	130
	.quad	32
block_c7Cm_info:
_c7Cm:
	movq 8(%rbp),%rax
	addq $7,%rbx
	movq 16(%rbp),%rcx
	addq (%rbx),%rcx
	addq $24,%rbp
_n7CJ:
	movq %rcx,%r14
	movq %rax,%rsi
	jmp _c7C6
.text
.align 3
	.quad	65
	.quad	32
block_c7C8_info:
_c7C8:
	movq %rbx,%rax
	andq $7,%rax
	cmpq $2,%rax
	jae _c7Cg
_c7Ch:
	movq 8(%rbp),%rbx
	addq $16,%rbp
	jmp *(%rbp)
_c7Cg:
	leaq block_c7Cm_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7Cm
_c7Cn:
	jmp *(%rbx)
_c7Cv:
	leaq $wlgo_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wlgo_info - $wlgo_info_dsp
.data
.align 3
.align 0
.globl main_eta_closure
main_eta_closure:
	.quad	main_eta_info
.text
.align 3
main_eta_info_dsp:
.text
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta_info
main_eta_info:
_c7CU:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7D1
_c7D2:
	leaq block_c7CS_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rsi
	xorl %r14d,%r14d
	addq $-8,%rbp
	jmp $wlgo_info
.text
.align 3
	.quad	0
	.quad	32
block_c7CS_info:
_c7CS:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _c7D0
_c7CZ:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7D0:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
_c7D1:
	leaq main_eta_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main_eta_info - main_eta_info_dsp
.data
.align 3
.align 0
.globl $wa_closure
$wa_closure:
	.quad	$wa_info
.text
.align 3
sat_s7rN_info_dsp:
.text
.align 3
	.quad	2
	.quad	19
sat_s7rN_info:
_c7DG:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7DK
_c7DL:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c7DE_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
.align 3
	.quad	0
	.quad	32
block_c7DE_info:
_c7DE:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7DK:
	jmp *-16(%r13)
	.long  sat_s7rN_info - sat_s7rN_info_dsp
.text
.align 3
$wa_info_dsp:
.text
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa_info
$wa_info:
_c7DM:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c7DU
_c7DV:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c7E0
_c7DW:
	testq %rdi,%rdi
	jle _c7DS
_c7DT:
	leaq sat_s7rN_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c7DN_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testq $7,%rbx
	jne _c7DN
_c7DX:
	jmp *(%rbx)
.text
.align 3
	.quad	259
	.quad	32
block_c7DN_info:
_c7DN:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa_info
_c7DS:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
_c7E0:
	movq $32,904(%r13)
_c7DU:
	leaq $wa_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wa_info - $wa_info_dsp
.data
.align 3
.align 0
.globl main9_closure
main9_closure:
	.quad	main9_info
	.quad	0
.text
.align 3
main9_info_dsp:
.text
.align 3
	.quad	S7vo_srt-(main9_info)+0
	.quad	8589934597
	.quad	0
	.quad	73014444047
.globl main9_info
main9_info:
_c7Ep:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7Et
_c7Eu:
	leaq block_c7Em_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7Em
_c7En:
	jmp *(%rbx)
.text
.align 3
	.quad	S7vo_srt-(block_c7Em_info)+0
	.quad	0
	.quad	4294967328
block_c7Em_info:
_c7Em:
	movq 7(%rbx),%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta_closure+1(%rip),%r14
	addq $8,%rbp
	jmp $wa_info
_c7Et:
	leaq main9_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main9_info - main9_info_dsp
.data
.align 3
.align 0
.globl main8_closure
main8_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main10_closure
	.quad	main9_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main7_closure
main7_closure:
	.quad	:_static_info
	.quad	main8_closure+2
	.quad	[]_closure+1
	.quad	0
.data
.align 3
.align 0
.globl main6_closure
main6_closure:
	.quad	:_static_info
	.quad	main11_closure+2
	.quad	main7_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main5_closure
main5_closure:
	.quad	:_static_info
	.quad	main14_closure+2
	.quad	main6_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main4_closure
main4_closure:
	.quad	:_static_info
	.quad	main17_closure+2
	.quad	main5_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main3_closure
main3_closure:
	.quad	Criterion.Types.BenchGroup_static_info
	.quad	main20_closure
	.quad	main4_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main2_closure
main2_closure:
	.quad	:_static_info
	.quad	main3_closure+3
	.quad	[]_closure+1
	.quad	0
.data
.align 3
.align 0
.globl main1_closure
main1_closure:
	.quad	main1_info
	.quad	0
.text
.align 3
main1_info_dsp:
.text
.align 3
	.quad	S7vo_srt-(main1_info)+40
	.quad	4294967299
	.quad	0
	.quad	30064771087
.globl main1_info
main1_info:
_c7ET:
	leaq main2_closure+2(%rip),%rsi
	leaq Criterion.Options.defaultConfig_closure(%rip),%r14
	jmp Criterion.defaultMain2_info
	.long  main1_info - main1_info_dsp
.data
.align 3
.align 0
.globl main_closure
main_closure:
	.quad	main_info
	.quad	0
.text
.align 3
main_info_dsp:
.text
.align 3
	.quad	S7vo_srt-(main_info)+64
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl main_info
main_info:
_c7F4:
	jmp main1_info
	.long  main_info - main_info_dsp
.data
.align 3
.align 0
.globl main21_closure
main21_closure:
	.quad	main21_info
	.quad	0
.text
.align 3
main21_info_dsp:
.text
.align 3
	.quad	S7vo_srt-(main21_info)+64
	.quad	4294967299
	.quad	0
	.quad	12884901903
.globl main21_info
main21_info:
_c7Ff:
	leaq main1_closure+1(%rip),%r14
	jmp runMainIO1_info
	.long  main21_info - main21_info_dsp
.data
.align 3
.align 0
.globl :main_closure
:main_closure:
	.quad	:main_info
	.quad	0
.text
.align 3
:main_info_dsp:
.text
.align 3
	.quad	S7vo_srt-(:main_info)+80
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl :main_info
:main_info:
_c7Fq:
	jmp main21_info
	.long  :main_info - :main_info_dsp
.const_data
.align 3
.align 0
S7vo_srt:
	.quad	myList_closure
	.quad	main18_closure
	.quad	main15_closure
	.quad	main12_closure
	.quad	main9_closure
	.quad	Criterion.defaultMain2_closure
	.quad	Criterion.Options.defaultConfig_closure
	.quad	main2_closure
	.quad	main1_closure
	.quad	runMainIO1_closure
	.quad	main21_closure

Linking BenchSum ...


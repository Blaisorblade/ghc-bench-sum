$ stack --resolver lts-7.0 exec -- ghc-core -w /Users/pgiarrusso/.stack/programs/x86_64-osx/ghc-8.0.1/bin/ghc --no-syntax -- -O BenchSum.hs
[1 of 1] Compiling Main             ( BenchSum.hs, BenchSum.o )

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 330, types: 376, coercions: 41}

-- RHS size: {terms: 2, types: 0, coercions: 0}
lvl_rcmn :: Int

lvl_rcmn = I# 0#

-- RHS size: {terms: 3, types: 2, coercions: 0}
$ssum [InlPrag=INLINE (sat-args=0)] :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=False)
         Tmpl= foldl
                 @ Int @ Int $fNumInt_$c+ (I# 0#)}]
$ssum =
  foldl @ Int @ Int $fNumInt_$c+ lvl_rcmn

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule2 :: TrName
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
$trModule2 = TrNameS "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule1 :: TrName
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
$trModule1 = TrNameS "Main"#

-- RHS size: {terms: 3, types: 0, coercions: 0}
$trModule :: Module
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$trModule = Module $trModule2 $trModule1

-- RHS size: {terms: 4, types: 0, coercions: 0}
myList :: [Int]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
myList = efdtInt 1# 2# 10000#

-- RHS size: {terms: 2, types: 0, coercions: 0}
main20 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main20 = unpackCString# "avgSimpl"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
main19 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main19 = unpackCString# "fsum2"#

-- RHS size: {terms: 15, types: 10, coercions: 0}
$wgo3 [InlPrag=[0], Occ=LoopBreaker]
  :: [Int] -> Int# -> Int#

$wgo3 =
  \ (w_schQ :: [Int]) (ww_schU :: Int#) ->
    case w_schQ of _ [Occ=Dead] {
      [] -> ww_schU;
      : y_abbQ ys_abbR ->
        case y_abbQ of _ [Occ=Dead] { I# y1_abbl ->
        $wgo3 ys_abbR (+# ww_schU y1_abbl)
        }
    }

-- RHS size: {terms: 8, types: 3, coercions: 0}
main_eta1 [InlPrag=INLINE[0]] :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sci0 [Occ=Once] :: [Int]) ->
                 case $wgo3 w_sci0 0# of ww_sci3 { __DEFAULT ->
                 I# ww_sci3
                 }}]
main_eta1 =
  \ (w_sci0 :: [Int]) ->
    case $wgo3 w_sci0 0# of ww_sci3 { __DEFAULT ->
    I# ww_sci3
    }

-- RHS size: {terms: 30, types: 28, coercions: 0}
$wgo4 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wgo4 =
  \ (w_sci5 :: [Int] -> Int)
    (w1_sci6 :: [Int])
    (ww_scib :: Int#)
    (w2_sci8 [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_scib 0#)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_sci5 w1_sci6 of _ [Occ=Dead] { I# ipv_abcO ->
                ()
                })
               w2_sci8
        of _ [Occ=Dead] { (# ipv_abdd, ipv1_abde #) ->
        $wgo4 w_sci5 w1_sci6 (-# ww_scib 1#) ipv_abdd
        };
      True -> (# w2_sci8, () #)
    }

-- RHS size: {terms: 7, types: 3, coercions: 0}
$wmain3 [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wmain3 =
  \ (ww_scii :: Int#)
    (w_scif [OS=OneShot] :: State# RealWorld) ->
    $wgo4 main_eta1 myList ww_scii w_scif

-- RHS size: {terms: 8, types: 5, coercions: 0}
main18 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scie [Occ=Once!] :: Int64)
                 (w1_scif [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_scie of _ [Occ=Dead] { I64# ww1_scii [Occ=Once] ->
                 $wmain3 ww1_scii w1_scif
                 }}]
main18 =
  \ (w_scie :: Int64)
    (w1_scif [OS=OneShot] :: State# RealWorld) ->
    case w_scie of _ [Occ=Dead] { I64# ww1_scii ->
    $wmain3 ww1_scii w1_scif
    }

-- RHS size: {terms: 3, types: 0, coercions: 8}
main17 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main17 =
  Criterion.Types.Benchmark
    main19
    (main18
     `cast` ((<Int64>_R -> Sym (N:IO[0] <()>_R))
             ; Sym Criterion.Types.N:Benchmarkable[0]
             :: ((Int64
                  -> State# RealWorld
                  -> (# State# RealWorld, () #)) :: *)
                ~R#
                (Benchmarkable :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0}
main16 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main16 = unpackCString# "F.sum"#

-- RHS size: {terms: 30, types: 28, coercions: 0}
$wgo2 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wgo2 =
  \ (w_scil :: [Int] -> Int)
    (w1_scim :: [Int])
    (ww_scir :: Int#)
    (w2_scio [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_scir 0#)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_scil w1_scim of _ [Occ=Dead] { I# ipv_abcO ->
                ()
                })
               w2_scio
        of _ [Occ=Dead] { (# ipv_abdd, ipv1_abde #) ->
        $wgo2 w_scil w1_scim (-# ww_scir 1#) ipv_abdd
        };
      True -> (# w2_scio, () #)
    }

-- RHS size: {terms: 7, types: 3, coercions: 0}
$wmain2 [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wmain2 =
  \ (ww_sciy :: Int#)
    (w_sciv [OS=OneShot] :: State# RealWorld) ->
    $wgo2 $ssum myList ww_sciy w_sciv

-- RHS size: {terms: 8, types: 5, coercions: 0}
main15 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sciu [Occ=Once!] :: Int64)
                 (w1_sciv [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_sciu of _ [Occ=Dead] { I64# ww1_sciy [Occ=Once] ->
                 $wmain2 ww1_sciy w1_sciv
                 }}]
main15 =
  \ (w_sciu :: Int64)
    (w1_sciv [OS=OneShot] :: State# RealWorld) ->
    case w_sciu of _ [Occ=Dead] { I64# ww1_sciy ->
    $wmain2 ww1_sciy w1_sciv
    }

-- RHS size: {terms: 3, types: 0, coercions: 8}
main14 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main14 =
  Criterion.Types.Benchmark
    main16
    (main15
     `cast` ((<Int64>_R -> Sym (N:IO[0] <()>_R))
             ; Sym Criterion.Types.N:Benchmarkable[0]
             :: ((Int64
                  -> State# RealWorld
                  -> (# State# RealWorld, () #)) :: *)
                ~R#
                (Benchmarkable :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0}
main13 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main13 = unpackCString# "psum2"#

-- RHS size: {terms: 15, types: 10, coercions: 0}
$wgo [InlPrag=[0], Occ=LoopBreaker]
  :: [Int] -> Int# -> Int#

$wgo =
  \ (w_sciB :: [Int]) (ww_sciF :: Int#) ->
    case w_sciB of _ [Occ=Dead] {
      [] -> ww_sciF;
      : y_abbQ ys_abbR ->
        case y_abbQ of _ [Occ=Dead] { I# y1_abbl ->
        $wgo ys_abbR (+# ww_sciF y1_abbl)
        }
    }

-- RHS size: {terms: 8, types: 3, coercions: 0}
main_eta [InlPrag=INLINE[0]] :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sciL [Occ=Once] :: [Int]) ->
                 case $wgo w_sciL 0# of ww_sciO { __DEFAULT ->
                 I# ww_sciO
                 }}]
main_eta =
  \ (w_sciL :: [Int]) ->
    case $wgo w_sciL 0# of ww_sciO { __DEFAULT ->
    I# ww_sciO
    }

-- RHS size: {terms: 30, types: 28, coercions: 0}
$wgo1 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wgo1 =
  \ (w_sciQ :: [Int] -> Int)
    (w1_sciR :: [Int])
    (ww_sciW :: Int#)
    (w2_sciT [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_sciW 0#)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_sciQ w1_sciR of _ [Occ=Dead] { I# ipv_abcO ->
                ()
                })
               w2_sciT
        of _ [Occ=Dead] { (# ipv_abdd, ipv1_abde #) ->
        $wgo1 w_sciQ w1_sciR (-# ww_sciW 1#) ipv_abdd
        };
      True -> (# w2_sciT, () #)
    }

-- RHS size: {terms: 7, types: 3, coercions: 0}
$wmain1 [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wmain1 =
  \ (ww_scj3 :: Int#)
    (w_scj0 [OS=OneShot] :: State# RealWorld) ->
    $wgo1 main_eta myList ww_scj3 w_scj0

-- RHS size: {terms: 8, types: 5, coercions: 0}
main12 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sciZ [Occ=Once!] :: Int64)
                 (w1_scj0 [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_sciZ of _ [Occ=Dead] { I64# ww1_scj3 [Occ=Once] ->
                 $wmain1 ww1_scj3 w1_scj0
                 }}]
main12 =
  \ (w_sciZ :: Int64)
    (w1_scj0 [OS=OneShot] :: State# RealWorld) ->
    case w_sciZ of _ [Occ=Dead] { I64# ww1_scj3 ->
    $wmain1 ww1_scj3 w1_scj0
    }

-- RHS size: {terms: 3, types: 0, coercions: 8}
main11 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main11 =
  Criterion.Types.Benchmark
    main13
    (main12
     `cast` ((<Int64>_R -> Sym (N:IO[0] <()>_R))
             ; Sym Criterion.Types.N:Benchmarkable[0]
             :: ((Int64
                  -> State# RealWorld
                  -> (# State# RealWorld, () #)) :: *)
                ~R#
                (Benchmarkable :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0}
main10 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main10 = unpackCString# "P.sum"#

-- RHS size: {terms: 30, types: 28, coercions: 0}
$wgo12 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wgo12 =
  \ (w_scj6 :: [Int] -> Int)
    (w1_scj7 :: [Int])
    (ww_scjc :: Int#)
    (w2_scj9 [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_scjc 0#)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_scj6 w1_scj7 of _ [Occ=Dead] { I# ipv_abcO ->
                ()
                })
               w2_scj9
        of _ [Occ=Dead] { (# ipv_abdd, ipv1_abde #) ->
        $wgo12 w_scj6 w1_scj7 (-# ww_scjc 1#) ipv_abdd
        };
      True -> (# w2_scj9, () #)
    }

-- RHS size: {terms: 7, types: 3, coercions: 0}
$wmain [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wmain =
  \ (ww_scjj :: Int#)
    (w_scjg [OS=OneShot] :: State# RealWorld) ->
    $wgo12 $ssum myList ww_scjj w_scjg

-- RHS size: {terms: 8, types: 5, coercions: 0}
main9 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scjf [Occ=Once!] :: Int64)
                 (w1_scjg [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_scjf of _ [Occ=Dead] { I64# ww1_scjj [Occ=Once] ->
                 $wmain ww1_scjj w1_scjg
                 }}]
main9 =
  \ (w_scjf :: Int64)
    (w1_scjg [OS=OneShot] :: State# RealWorld) ->
    case w_scjf of _ [Occ=Dead] { I64# ww1_scjj ->
    $wmain ww1_scjj w1_scjg
    }

-- RHS size: {terms: 3, types: 0, coercions: 8}
main8 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main8 =
  Criterion.Types.Benchmark
    main10
    (main9
     `cast` ((<Int64>_R -> Sym (N:IO[0] <()>_R))
             ; Sym Criterion.Types.N:Benchmarkable[0]
             :: ((Int64
                  -> State# RealWorld
                  -> (# State# RealWorld, () #)) :: *)
                ~R#
                (Benchmarkable :: *)))

-- RHS size: {terms: 3, types: 2, coercions: 0}
main7 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main7 =
  : @ Benchmark main8 ([] @ Benchmark)

-- RHS size: {terms: 3, types: 1, coercions: 0}
main6 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main6 = : @ Benchmark main11 main7

-- RHS size: {terms: 3, types: 1, coercions: 0}
main5 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main5 = : @ Benchmark main14 main6

-- RHS size: {terms: 3, types: 1, coercions: 0}
main4 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main4 = : @ Benchmark main17 main5

-- RHS size: {terms: 3, types: 0, coercions: 0}
main3 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main3 = Criterion.Types.BenchGroup main20 main4

-- RHS size: {terms: 3, types: 2, coercions: 0}
main2 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main2 =
  : @ Benchmark main3 ([] @ Benchmark)

-- RHS size: {terms: 3, types: 0, coercions: 0}
main1
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
main1 = Criterion.defaultMain2 defaultConfig main2

-- RHS size: {terms: 1, types: 0, coercions: 3}
main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main1
               `cast` (Sym (N:IO[0] <()>_R)
                       :: ((State# RealWorld
                            -> (# State# RealWorld, () #)) :: *)
                          ~R#
                          (IO () :: *))}]
main =
  main1
  `cast` (Sym (N:IO[0] <()>_R)
          :: ((State# RealWorld
               -> (# State# RealWorld, () #)) :: *)
             ~R#
             (IO () :: *))

-- RHS size: {terms: 2, types: 1, coercions: 3}
main21
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main21 =
  runMainIO1
    @ ()
    (main1
     `cast` (Sym (N:IO[0] <()>_R)
             :: ((State# RealWorld
                  -> (# State# RealWorld, () #)) :: *)
                ~R#
                (IO () :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 3}
:main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main21
               `cast` (Sym (N:IO[0] <()>_R)
                       :: ((State# RealWorld
                            -> (# State# RealWorld, () #)) :: *)
                          ~R#
                          (IO () :: *))}]
:main =
  main21
  `cast` (Sym (N:IO[0] <()>_R)
          :: ((State# RealWorld
               -> (# State# RealWorld, () #)) :: *)
             ~R#
             (IO () :: *))

------ Local rules for imported ids --------
"SPEC/Main sum @ Int" [ALWAYS]
    forall ($dNum_sbap :: Num Int).
      sum @ Int $dNum_sbap
      = $ssum

==================== Asm code ====================
.data
.align 3
.align 0
.globl __stginit_main@main:Main
__stginit_main@main:Main:

==================== Asm code ====================
.data
.align 3
.align 0
lvl_rcmn_closure:
	.quad	I#_static_info
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl $ssum_closure
$ssum_closure:
	.quad	$ssum_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl $ssum_info
$ssum_info:
_cco6:
	movq %r14,%rdi
	leaq lvl_rcmn_closure+1(%rip),%rsi
	leaq $fNumInt_$c+_closure+2(%rip),%r14
	jmp foldl_info

==================== Asm code ====================
.const
.align 3
.align 0
ccoe_str:
	.byte	109
	.byte	97
	.byte	105
	.byte	110
	.byte	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl $trModule2_closure
$trModule2_closure:
	.quad	TrNameS_static_info
	.quad	ccoe_str

==================== Asm code ====================
.const
.align 3
.align 0
ccoi_str:
	.byte	77
	.byte	97
	.byte	105
	.byte	110
	.byte	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl $trModule1_closure
$trModule1_closure:
	.quad	TrNameS_static_info
	.quad	ccoi_str

==================== Asm code ====================
.data
.align 3
.align 0
.globl $trModule_closure
$trModule_closure:
	.quad	Module_static_info
	.quad	$trModule2_closure+1
	.quad	$trModule1_closure+1
	.quad	3

==================== Asm code ====================
.data
.align 3
.align 0
.globl myList_closure
myList_closure:
	.quad	myList_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl myList_info
myList_info:
_ccot:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccou
_ccov:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccos
_ccor:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $10000,%edi
	movl $2,%esi
	movl $1,%r14d
	addq $-16,%rbp
	jmp efdtInt_info
_ccou:
	jmp *-16(%r13)
_ccos:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl main20_closure
main20_closure:
	.quad	main20_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
.align 3
.align 0
ccoI_str:
	.byte	97
	.byte	118
	.byte	103
	.byte	83
	.byte	105
	.byte	109
	.byte	112
	.byte	108
	.byte	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl main20_info
main20_info:
_ccoJ:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccoK
_ccoL:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccoH
_ccoG:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq ccoI_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_ccoK:
	jmp *-16(%r13)
_ccoH:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl main19_closure
main19_closure:
	.quad	main19_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
.align 3
.align 0
ccoZ_str:
	.byte	102
	.byte	115
	.byte	117
	.byte	109
	.byte	50
	.byte	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl main19_info
main19_info:
_ccp0:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccp1
_ccp2:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccoY
_ccoX:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq ccoZ_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_ccp1:
	jmp *-16(%r13)
_ccoY:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo3_closure
$wgo3_closure:
	.quad	$wgo3_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	8589934606
	.quad	0
	.quad	15
.globl $wgo3_info
$wgo3_info:
_ccpx:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jae _ccpn
_ccpy:
	leaq $wgo3_closure(%rip),%rbx
	jmp *-8(%r13)
_ccpv:
	leaq block_ccpF_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testb $7,%bl
	jne _ccpF
_ccpH:
	jmp *(%rbx)
.align 3
	.quad	65
	.quad	32
block_ccpq_info:
_ccpq:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	jne _ccpv
_ccpu:
	movq 8(%rbp),%rbx
	addq $16,%rbp
	jmp *(%rbp)
.align 3
	.quad	130
	.quad	32
block_ccpF_info:
_ccpF:
	leaq 7(%rbx),%rax
	movq 16(%rbp),%rbx
	addq (%rax),%rbx
	movq 8(%rbp),%rax
	addq $24,%rbp
_ncpY:
	movq %rbx,%rsi
	movq %rax,%r14
_ccpn:
	leaq block_ccpq_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %r14,%rbx
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	testb $7,%bl
	jne _ccpq
_ccpr:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl main_eta1_closure
main_eta1_closure:
	.quad	main_eta1_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta1_info
main_eta1_info:
_ccq9:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _ccqd
_ccqe:
	leaq block_ccq7_info(%rip),%rax
	movq %rax,-8(%rbp)
	xorl %esi,%esi
	addq $-8,%rbp
	jmp $wgo3_info
_ccqh:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
.align 3
	.quad	0
	.quad	32
block_ccq7_info:
_ccq7:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _ccqh
_ccqg:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_ccqd:
	leaq main_eta1_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo4_closure
$wgo4_closure:
	.quad	$wgo4_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	2
	.quad	19
sat_scmK_info:
_ccqV:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _ccqW
_ccqX:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_ccqT_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
_ccqW:
	jmp *-16(%r13)
.align 3
	.quad	0
	.quad	32
block_ccqT_info:
_ccqT:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wgo4_info
$wgo4_info:
_ccr1:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _ccr2
_ccqH:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _ccr5
_ccr4:
	testq %rdi,%rdi
	jle _ccrc
_ccr8:
	leaq sat_scmK_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_ccr6_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _ccr6
_ccr9:
	jmp *(%rbx)
_ccrc:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
.align 3
	.quad	259
	.quad	32
block_ccr6_info:
_ccr6:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 24(%rbp),%rdx
	decq %rdx
	addq $32,%rbp
_ncrr:
	movq %rdx,%rdi
	movq %rcx,%rsi
	movq %rax,%r14
	jmp _ccqH
_ccr5:
	movq $32,904(%r13)
_ccr2:
	leaq $wgo4_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wmain3_closure
$wmain3_closure:
	.quad	$wmain3_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-($wmain3_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wmain3_info
$wmain3_info:
_ccrx:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta1_closure+1(%rip),%r14
	jmp $wgo4_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main18_closure
main18_closure:
	.quad	main18_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-(main18_info)+8
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main18_info
main18_info:
_ccrP:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _ccrQ
_ccrR:
	leaq block_ccrM_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _ccrM
_ccrN:
	jmp *(%rbx)
_ccrQ:
	leaq main18_closure(%rip),%rbx
	jmp *-8(%r13)
.align 3
	.quad	ScrA_srt-(block_ccrM_info)+8
	.quad	0
	.quad	4294967328
block_ccrM_info:
_ccrM:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wmain3_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main17_closure
main17_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main19_closure
	.quad	main18_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main16_closure
main16_closure:
	.quad	main16_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
.align 3
.align 0
ccs9_str:
	.byte	70
	.byte	46
	.byte	115
	.byte	117
	.byte	109
	.byte	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl main16_info
main16_info:
_ccsa:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccsb
_ccsc:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccs8
_ccs7:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq ccs9_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_ccsb:
	jmp *-16(%r13)
_ccs8:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo2_closure
$wgo2_closure:
	.quad	$wgo2_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	2
	.quad	19
sat_scn3_info:
_ccsQ:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _ccsR
_ccsS:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_ccsO_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
_ccsR:
	jmp *-16(%r13)
.align 3
	.quad	0
	.quad	32
block_ccsO_info:
_ccsO:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wgo2_info
$wgo2_info:
_ccsW:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _ccsX
_ccsC:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _cct0
_ccsZ:
	testq %rdi,%rdi
	jle _cct7
_cct3:
	leaq sat_scn3_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_cct1_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _cct1
_cct4:
	jmp *(%rbx)
_cct7:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
.align 3
	.quad	259
	.quad	32
block_cct1_info:
_cct1:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 24(%rbp),%rdx
	decq %rdx
	addq $32,%rbp
_nctm:
	movq %rdx,%rdi
	movq %rcx,%rsi
	movq %rax,%r14
	jmp _ccsC
_cct0:
	movq $32,904(%r13)
_ccsX:
	leaq $wgo2_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wmain2_closure
$wmain2_closure:
	.quad	$wmain2_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-($wmain2_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wmain2_info
$wmain2_info:
_ccts:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq $ssum_closure+1(%rip),%r14
	jmp $wgo2_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main15_closure
main15_closure:
	.quad	main15_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-(main15_info)+24
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main15_info
main15_info:
_cctJ:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _cctK
_cctL:
	leaq block_cctG_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _cctG
_cctH:
	jmp *(%rbx)
_cctK:
	leaq main15_closure(%rip),%rbx
	jmp *-8(%r13)
.align 3
	.quad	ScrA_srt-(block_cctG_info)+24
	.quad	0
	.quad	4294967328
block_cctG_info:
_cctG:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wmain2_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main14_closure
main14_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main16_closure
	.quad	main15_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main13_closure
main13_closure:
	.quad	main13_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
.align 3
.align 0
ccu3_str:
	.byte	112
	.byte	115
	.byte	117
	.byte	109
	.byte	50
	.byte	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl main13_info
main13_info:
_ccu4:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccu5
_ccu6:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccu2
_ccu1:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq ccu3_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_ccu5:
	jmp *-16(%r13)
_ccu2:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo_closure
$wgo_closure:
	.quad	$wgo_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	8589934606
	.quad	0
	.quad	15
.globl $wgo_info
$wgo_info:
_ccuB:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jae _ccur
_ccuC:
	leaq $wgo_closure(%rip),%rbx
	jmp *-8(%r13)
_ccuz:
	leaq block_ccuJ_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testb $7,%bl
	jne _ccuJ
_ccuL:
	jmp *(%rbx)
.align 3
	.quad	65
	.quad	32
block_ccuu_info:
_ccuu:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	jne _ccuz
_ccuy:
	movq 8(%rbp),%rbx
	addq $16,%rbp
	jmp *(%rbp)
.align 3
	.quad	130
	.quad	32
block_ccuJ_info:
_ccuJ:
	leaq 7(%rbx),%rax
	movq 16(%rbp),%rbx
	addq (%rax),%rbx
	movq 8(%rbp),%rax
	addq $24,%rbp
_ncv2:
	movq %rbx,%rsi
	movq %rax,%r14
_ccur:
	leaq block_ccuu_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %r14,%rbx
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	testb $7,%bl
	jne _ccuu
_ccuv:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl main_eta_closure
main_eta_closure:
	.quad	main_eta_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta_info
main_eta_info:
_ccvd:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _ccvh
_ccvi:
	leaq block_ccvb_info(%rip),%rax
	movq %rax,-8(%rbp)
	xorl %esi,%esi
	addq $-8,%rbp
	jmp $wgo_info
_ccvl:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
.align 3
	.quad	0
	.quad	32
block_ccvb_info:
_ccvb:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _ccvl
_ccvk:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_ccvh:
	leaq main_eta_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo1_closure
$wgo1_closure:
	.quad	$wgo1_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	2
	.quad	19
sat_scnw_info:
_ccvZ:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _ccw0
_ccw1:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_ccvX_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
_ccw0:
	jmp *-16(%r13)
.align 3
	.quad	0
	.quad	32
block_ccvX_info:
_ccvX:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wgo1_info
$wgo1_info:
_ccw5:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _ccw6
_ccvL:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _ccw9
_ccw8:
	testq %rdi,%rdi
	jle _ccwg
_ccwc:
	leaq sat_scnw_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_ccwa_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _ccwa
_ccwd:
	jmp *(%rbx)
_ccwg:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
.align 3
	.quad	259
	.quad	32
block_ccwa_info:
_ccwa:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 24(%rbp),%rdx
	decq %rdx
	addq $32,%rbp
_ncwv:
	movq %rdx,%rdi
	movq %rcx,%rsi
	movq %rax,%r14
	jmp _ccvL
_ccw9:
	movq $32,904(%r13)
_ccw6:
	leaq $wgo1_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wmain1_closure
$wmain1_closure:
	.quad	$wmain1_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-($wmain1_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wmain1_info
$wmain1_info:
_ccwB:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta_closure+1(%rip),%r14
	jmp $wgo1_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main12_closure
main12_closure:
	.quad	main12_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-(main12_info)+40
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main12_info
main12_info:
_ccwS:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _ccwT
_ccwU:
	leaq block_ccwP_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _ccwP
_ccwQ:
	jmp *(%rbx)
_ccwT:
	leaq main12_closure(%rip),%rbx
	jmp *-8(%r13)
.align 3
	.quad	ScrA_srt-(block_ccwP_info)+40
	.quad	0
	.quad	4294967328
block_ccwP_info:
_ccwP:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wmain1_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main11_closure
main11_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main13_closure
	.quad	main12_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main10_closure
main10_closure:
	.quad	main10_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
.align 3
.align 0
ccxc_str:
	.byte	80
	.byte	46
	.byte	115
	.byte	117
	.byte	109
	.byte	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl main10_info
main10_info:
_ccxd:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccxe
_ccxf:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccxb
_ccxa:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq ccxc_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_ccxe:
	jmp *-16(%r13)
_ccxb:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo12_closure
$wgo12_closure:
	.quad	$wgo12_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	2
	.quad	19
sat_scnP_info:
_ccxT:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _ccxU
_ccxV:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_ccxR_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
_ccxU:
	jmp *-16(%r13)
.align 3
	.quad	0
	.quad	32
block_ccxR_info:
_ccxR:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wgo12_info
$wgo12_info:
_ccxZ:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _ccy0
_ccxF:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _ccy3
_ccy2:
	testq %rdi,%rdi
	jle _ccya
_ccy6:
	leaq sat_scnP_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_ccy4_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _ccy4
_ccy7:
	jmp *(%rbx)
_ccya:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
.align 3
	.quad	259
	.quad	32
block_ccy4_info:
_ccy4:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 24(%rbp),%rdx
	decq %rdx
	addq $32,%rbp
_ncyp:
	movq %rdx,%rdi
	movq %rcx,%rsi
	movq %rax,%r14
	jmp _ccxF
_ccy3:
	movq $32,904(%r13)
_ccy0:
	leaq $wgo12_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wmain_closure
$wmain_closure:
	.quad	$wmain_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-($wmain_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wmain_info
$wmain_info:
_ccyv:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq $ssum_closure+1(%rip),%r14
	jmp $wgo12_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main9_closure
main9_closure:
	.quad	main9_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-(main9_info)+56
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main9_info
main9_info:
_ccyM:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _ccyN
_ccyO:
	leaq block_ccyJ_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _ccyJ
_ccyK:
	jmp *(%rbx)
_ccyN:
	leaq main9_closure(%rip),%rbx
	jmp *-8(%r13)
.align 3
	.quad	ScrA_srt-(block_ccyJ_info)+56
	.quad	0
	.quad	4294967328
block_ccyJ_info:
_ccyJ:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wmain_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main8_closure
main8_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main10_closure
	.quad	main9_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main7_closure
main7_closure:
	.quad	:_static_info
	.quad	main8_closure+2
	.quad	[]_closure+1
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main6_closure
main6_closure:
	.quad	:_static_info
	.quad	main11_closure+2
	.quad	main7_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main5_closure
main5_closure:
	.quad	:_static_info
	.quad	main14_closure+2
	.quad	main6_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main4_closure
main4_closure:
	.quad	:_static_info
	.quad	main17_closure+2
	.quad	main5_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main3_closure
main3_closure:
	.quad	Criterion.Types.BenchGroup_static_info
	.quad	main20_closure
	.quad	main4_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main2_closure
main2_closure:
	.quad	:_static_info
	.quad	main3_closure+3
	.quad	[]_closure+1
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main1_closure
main1_closure:
	.quad	main1_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-(main1_info)+72
	.quad	4294967299
	.quad	0
	.quad	30064771087
.globl main1_info
main1_info:
_cczg:
	leaq main2_closure+2(%rip),%rsi
	leaq Criterion.Options.defaultConfig_closure(%rip),%r14
	jmp Criterion.defaultMain2_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main_closure
main_closure:
	.quad	main_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-(main_info)+96
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl main_info
main_info:
_cczr:
	jmp main1_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main21_closure
main21_closure:
	.quad	main21_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-(main21_info)+96
	.quad	4294967299
	.quad	0
	.quad	12884901903
.globl main21_info
main21_info:
_cczC:
	leaq main1_closure+1(%rip),%r14
	jmp runMainIO1_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl :main_closure
:main_closure:
	.quad	:main_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	ScrA_srt-(:main_info)+112
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl :main_info
:main_info:
_cczN:
	jmp main21_info

==================== Asm code ====================
.const_data
.align 3
.align 0
ScrA_srt:
	.quad	myList_closure
	.quad	$wmain3_closure
	.quad	main18_closure
	.quad	$wmain2_closure
	.quad	main15_closure
	.quad	$wmain1_closure
	.quad	main12_closure
	.quad	$wmain_closure
	.quad	main9_closure
	.quad	Criterion.defaultMain2_closure
	.quad	Criterion.Options.defaultConfig_closure
	.quad	main2_closure
	.quad	main1_closure
	.quad	runMainIO1_closure
	.quad	main21_closure

Linking BenchSum ...


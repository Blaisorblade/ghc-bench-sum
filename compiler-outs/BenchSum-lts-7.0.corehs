$ stack --resolver lts-7.0 exec -- ghc-core --no-syntax -- -O BenchSum.hs
[1 of 1] Compiling Main             ( BenchSum.hs, BenchSum.o )

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 330, types: 376, coercions: 41}

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule2 :: TrName
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
$trModule2 = TrNameS "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule1 :: TrName
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
$trModule1 = TrNameS "Main"#

-- RHS size: {terms: 3, types: 0, coercions: 0}
$trModule :: Module
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$trModule = Module $trModule2 $trModule1

-- RHS size: {terms: 4, types: 0, coercions: 0}
myList :: [Int]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
myList = efdtInt 1# 2# 10000#

-- RHS size: {terms: 2, types: 0, coercions: 0}
main21 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main21 = unpackCString# "avgSimpl"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
main20 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main20 = unpackCString# "fsum2"#

-- RHS size: {terms: 15, types: 10, coercions: 0}
$wgo3 [InlPrag=[0], Occ=LoopBreaker]
  :: [Int] -> Int# -> Int#

$wgo3 =
  \ (w_sciY :: [Int]) (ww_scj2 :: Int#) ->
    case w_sciY of _ [Occ=Dead] {
      [] -> ww_scj2;
      : y_abcY ys_abcZ ->
        case y_abcY of _ [Occ=Dead] { I# y1_abbz ->
        $wgo3 ys_abcZ (+# ww_scj2 y1_abbz)
        }
    }

-- RHS size: {terms: 8, types: 3, coercions: 0}
main_eta2 [InlPrag=INLINE[0]] :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scj8 [Occ=Once] :: [Int]) ->
                 case $wgo3 w_scj8 0# of ww_scjb { __DEFAULT ->
                 I# ww_scjb
                 }}]
main_eta2 =
  \ (w_scj8 :: [Int]) ->
    case $wgo3 w_scj8 0# of ww_scjb { __DEFAULT ->
    I# ww_scjb
    }

-- RHS size: {terms: 30, types: 28, coercions: 0}
$wgo4 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wgo4 =
  \ (w_scjd :: [Int] -> Int)
    (w1_scje :: [Int])
    (ww_scjj :: Int#)
    (w2_scjg [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_scjj 0#)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_scjd w1_scje of _ [Occ=Dead] { I# ipv_abdW ->
                ()
                })
               w2_scjg
        of _ [Occ=Dead] { (# ipv_abel, ipv1_abem #) ->
        $wgo4 w_scjd w1_scje (-# ww_scjj 1#) ipv_abel
        };
      True -> (# w2_scjg, () #)
    }

-- RHS size: {terms: 7, types: 3, coercions: 0}
$wmain3 [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wmain3 =
  \ (ww_scjq :: Int#)
    (w_scjn [OS=OneShot] :: State# RealWorld) ->
    $wgo4 main_eta2 myList ww_scjq w_scjn

-- RHS size: {terms: 8, types: 5, coercions: 0}
main19 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scjm [Occ=Once!] :: Int64)
                 (w1_scjn [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_scjm of _ [Occ=Dead] { I64# ww1_scjq [Occ=Once] ->
                 $wmain3 ww1_scjq w1_scjn
                 }}]
main19 =
  \ (w_scjm :: Int64)
    (w1_scjn [OS=OneShot] :: State# RealWorld) ->
    case w_scjm of _ [Occ=Dead] { I64# ww1_scjq ->
    $wmain3 ww1_scjq w1_scjn
    }

-- RHS size: {terms: 3, types: 0, coercions: 8}
main18 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main18 =
  Criterion.Types.Benchmark
    main20
    (main19
     `cast` ((<Int64>_R -> Sym (N:IO[0] <()>_R))
             ; Sym Criterion.Types.N:Benchmarkable[0]
             :: ((Int64
                  -> State# RealWorld
                  -> (# State# RealWorld, () #)) :: *)
                ~R#
                (Benchmarkable :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0}
main17 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main17 = unpackCString# "fsum1"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
main10 :: Int
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
main10 = I# 0#

-- RHS size: {terms: 3, types: 2, coercions: 0}
main_eta :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
main_eta =
  foldl @ Int @ Int $fNumInt_$c+ main10

-- RHS size: {terms: 30, types: 28, coercions: 0}
$wgo2 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wgo2 =
  \ (w_scjt :: [Int] -> Int)
    (w1_scju :: [Int])
    (ww_scjz :: Int#)
    (w2_scjw [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_scjz 0#)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_scjt w1_scju of _ [Occ=Dead] { I# ipv_abdW ->
                ()
                })
               w2_scjw
        of _ [Occ=Dead] { (# ipv_abel, ipv1_abem #) ->
        $wgo2 w_scjt w1_scju (-# ww_scjz 1#) ipv_abel
        };
      True -> (# w2_scjw, () #)
    }

-- RHS size: {terms: 7, types: 3, coercions: 0}
$wmain2 [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wmain2 =
  \ (ww_scjG :: Int#)
    (w_scjD [OS=OneShot] :: State# RealWorld) ->
    $wgo2 main_eta myList ww_scjG w_scjD

-- RHS size: {terms: 8, types: 5, coercions: 0}
main16 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scjC [Occ=Once!] :: Int64)
                 (w1_scjD [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_scjC of _ [Occ=Dead] { I64# ww1_scjG [Occ=Once] ->
                 $wmain2 ww1_scjG w1_scjD
                 }}]
main16 =
  \ (w_scjC :: Int64)
    (w1_scjD [OS=OneShot] :: State# RealWorld) ->
    case w_scjC of _ [Occ=Dead] { I64# ww1_scjG ->
    $wmain2 ww1_scjG w1_scjD
    }

-- RHS size: {terms: 3, types: 0, coercions: 8}
main15 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main15 =
  Criterion.Types.Benchmark
    main17
    (main16
     `cast` ((<Int64>_R -> Sym (N:IO[0] <()>_R))
             ; Sym Criterion.Types.N:Benchmarkable[0]
             :: ((Int64
                  -> State# RealWorld
                  -> (# State# RealWorld, () #)) :: *)
                ~R#
                (Benchmarkable :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0}
main14 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main14 = unpackCString# "psum2"#

-- RHS size: {terms: 15, types: 10, coercions: 0}
$wgo [InlPrag=[0], Occ=LoopBreaker]
  :: [Int] -> Int# -> Int#

$wgo =
  \ (w_scjJ :: [Int]) (ww_scjN :: Int#) ->
    case w_scjJ of _ [Occ=Dead] {
      [] -> ww_scjN;
      : y_abcY ys_abcZ ->
        case y_abcY of _ [Occ=Dead] { I# y1_abbz ->
        $wgo ys_abcZ (+# ww_scjN y1_abbz)
        }
    }

-- RHS size: {terms: 8, types: 3, coercions: 0}
main_eta1 [InlPrag=INLINE[0]] :: [Int] -> Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_scjT [Occ=Once] :: [Int]) ->
                 case $wgo w_scjT 0# of ww_scjW { __DEFAULT ->
                 I# ww_scjW
                 }}]
main_eta1 =
  \ (w_scjT :: [Int]) ->
    case $wgo w_scjT 0# of ww_scjW { __DEFAULT ->
    I# ww_scjW
    }

-- RHS size: {terms: 30, types: 28, coercions: 0}
$wgo1 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wgo1 =
  \ (w_scjY :: [Int] -> Int)
    (w1_scjZ :: [Int])
    (ww_sck4 :: Int#)
    (w2_sck1 [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_sck4 0#)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_scjY w1_scjZ of _ [Occ=Dead] { I# ipv_abdW ->
                ()
                })
               w2_sck1
        of _ [Occ=Dead] { (# ipv_abel, ipv1_abem #) ->
        $wgo1 w_scjY w1_scjZ (-# ww_sck4 1#) ipv_abel
        };
      True -> (# w2_sck1, () #)
    }

-- RHS size: {terms: 7, types: 3, coercions: 0}
$wmain1 [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wmain1 =
  \ (ww_sckb :: Int#)
    (w_sck8 [OS=OneShot] :: State# RealWorld) ->
    $wgo1 main_eta1 myList ww_sckb w_sck8

-- RHS size: {terms: 8, types: 5, coercions: 0}
main13 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sck7 [Occ=Once!] :: Int64)
                 (w1_sck8 [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_sck7 of _ [Occ=Dead] { I64# ww1_sckb [Occ=Once] ->
                 $wmain1 ww1_sckb w1_sck8
                 }}]
main13 =
  \ (w_sck7 :: Int64)
    (w1_sck8 [OS=OneShot] :: State# RealWorld) ->
    case w_sck7 of _ [Occ=Dead] { I64# ww1_sckb ->
    $wmain1 ww1_sckb w1_sck8
    }

-- RHS size: {terms: 3, types: 0, coercions: 8}
main12 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main12 =
  Criterion.Types.Benchmark
    main14
    (main13
     `cast` ((<Int64>_R -> Sym (N:IO[0] <()>_R))
             ; Sym Criterion.Types.N:Benchmarkable[0]
             :: ((Int64
                  -> State# RealWorld
                  -> (# State# RealWorld, () #)) :: *)
                ~R#
                (Benchmarkable :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0}
main11 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
main11 = unpackCString# "P.sum"#

-- RHS size: {terms: 30, types: 28, coercions: 0}
$wgo12 [InlPrag=[0], Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wgo12 =
  \ (w_scke :: [Int] -> Int)
    (w1_sckf :: [Int])
    (ww_sckk :: Int#)
    (w2_sckh [OS=OneShot] :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_sckk 0#)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_scke w1_sckf of _ [Occ=Dead] { I# ipv_abdW ->
                ()
                })
               w2_sckh
        of _ [Occ=Dead] { (# ipv_abel, ipv1_abem #) ->
        $wgo12 w_scke w1_sckf (-# ww_sckk 1#) ipv_abel
        };
      True -> (# w2_sckh, () #)
    }

-- RHS size: {terms: 7, types: 3, coercions: 0}
$wmain [InlPrag=[0]]
  :: Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
$wmain =
  \ (ww_sckr :: Int#)
    (w_scko [OS=OneShot] :: State# RealWorld) ->
    $wgo12 main_eta myList ww_sckr w_scko

-- RHS size: {terms: 8, types: 5, coercions: 0}
main9 [InlPrag=INLINE[0]]
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sckn [Occ=Once!] :: Int64)
                 (w1_scko [Occ=Once, OS=OneShot]
                    :: State# RealWorld) ->
                 case w_sckn of _ [Occ=Dead] { I64# ww1_sckr [Occ=Once] ->
                 $wmain ww1_sckr w1_scko
                 }}]
main9 =
  \ (w_sckn :: Int64)
    (w1_scko [OS=OneShot] :: State# RealWorld) ->
    case w_sckn of _ [Occ=Dead] { I64# ww1_sckr ->
    $wmain ww1_sckr w1_scko
    }

-- RHS size: {terms: 3, types: 0, coercions: 8}
main8 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main8 =
  Criterion.Types.Benchmark
    main11
    (main9
     `cast` ((<Int64>_R -> Sym (N:IO[0] <()>_R))
             ; Sym Criterion.Types.N:Benchmarkable[0]
             :: ((Int64
                  -> State# RealWorld
                  -> (# State# RealWorld, () #)) :: *)
                ~R#
                (Benchmarkable :: *)))

-- RHS size: {terms: 3, types: 2, coercions: 0}
main7 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main7 =
  : @ Benchmark main8 ([] @ Benchmark)

-- RHS size: {terms: 3, types: 1, coercions: 0}
main6 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main6 = : @ Benchmark main12 main7

-- RHS size: {terms: 3, types: 1, coercions: 0}
main5 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main5 = : @ Benchmark main15 main6

-- RHS size: {terms: 3, types: 1, coercions: 0}
main4 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main4 = : @ Benchmark main18 main5

-- RHS size: {terms: 3, types: 0, coercions: 0}
main3 :: Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main3 = Criterion.Types.BenchGroup main21 main4

-- RHS size: {terms: 3, types: 2, coercions: 0}
main2 :: [Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
main2 =
  : @ Benchmark main3 ([] @ Benchmark)

-- RHS size: {terms: 3, types: 0, coercions: 0}
main1
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
main1 = Criterion.defaultMain2 defaultConfig main2

-- RHS size: {terms: 1, types: 0, coercions: 3}
main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main1
               `cast` (Sym (N:IO[0] <()>_R)
                       :: ((State# RealWorld
                            -> (# State# RealWorld, () #)) :: *)
                          ~R#
                          (IO () :: *))}]
main =
  main1
  `cast` (Sym (N:IO[0] <()>_R)
          :: ((State# RealWorld
               -> (# State# RealWorld, () #)) :: *)
             ~R#
             (IO () :: *))

-- RHS size: {terms: 2, types: 1, coercions: 3}
main22
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main22 =
  runMainIO1
    @ ()
    (main1
     `cast` (Sym (N:IO[0] <()>_R)
             :: ((State# RealWorld
                  -> (# State# RealWorld, () #)) :: *)
                ~R#
                (IO () :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 3}
:main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main22
               `cast` (Sym (N:IO[0] <()>_R)
                       :: ((State# RealWorld
                            -> (# State# RealWorld, () #)) :: *)
                          ~R#
                          (IO () :: *))}]
:main =
  main22
  `cast` (Sym (N:IO[0] <()>_R)
          :: ((State# RealWorld
               -> (# State# RealWorld, () #)) :: *)
             ~R#
             (IO () :: *))

==================== Asm code ====================
.data
.align 3
.align 0
.globl __stginit_main@main:Main
__stginit_main@main:Main:

==================== Asm code ====================
.const
.align 3
.align 0
ccp9_str:
	.byte	109
	.byte	97
	.byte	105
	.byte	110
	.byte	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl $trModule2_closure
$trModule2_closure:
	.quad	TrNameS_static_info
	.quad	ccp9_str

==================== Asm code ====================
.const
.align 3
.align 0
ccpd_str:
	.byte	77
	.byte	97
	.byte	105
	.byte	110
	.byte	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl $trModule1_closure
$trModule1_closure:
	.quad	TrNameS_static_info
	.quad	ccpd_str

==================== Asm code ====================
.data
.align 3
.align 0
.globl $trModule_closure
$trModule_closure:
	.quad	Module_static_info
	.quad	$trModule2_closure+1
	.quad	$trModule1_closure+1
	.quad	3

==================== Asm code ====================
.data
.align 3
.align 0
.globl myList_closure
myList_closure:
	.quad	myList_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl myList_info
myList_info:
_ccpo:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccpp
_ccpq:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccpn
_ccpm:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $10000,%edi
	movl $2,%esi
	movl $1,%r14d
	addq $-16,%rbp
	jmp efdtInt_info
_ccpp:
	jmp *-16(%r13)
_ccpn:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl main21_closure
main21_closure:
	.quad	main21_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
.align 3
.align 0
ccpD_str:
	.byte	97
	.byte	118
	.byte	103
	.byte	83
	.byte	105
	.byte	109
	.byte	112
	.byte	108
	.byte	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl main21_info
main21_info:
_ccpE:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccpF
_ccpG:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccpC
_ccpB:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq ccpD_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_ccpF:
	jmp *-16(%r13)
_ccpC:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl main20_closure
main20_closure:
	.quad	main20_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
.align 3
.align 0
ccpU_str:
	.byte	102
	.byte	115
	.byte	117
	.byte	109
	.byte	50
	.byte	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl main20_info
main20_info:
_ccpV:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccpW
_ccpX:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccpT
_ccpS:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq ccpU_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_ccpW:
	jmp *-16(%r13)
_ccpT:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo3_closure
$wgo3_closure:
	.quad	$wgo3_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	8589934606
	.quad	0
	.quad	15
.globl $wgo3_info
$wgo3_info:
_ccqs:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jae _ccqi
_ccqt:
	leaq $wgo3_closure(%rip),%rbx
	jmp *-8(%r13)
_ccqq:
	leaq block_ccqA_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testb $7,%bl
	jne _ccqA
_ccqC:
	jmp *(%rbx)
.align 3
	.quad	65
	.quad	32
block_ccql_info:
_ccql:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	jne _ccqq
_ccqp:
	movq 8(%rbp),%rbx
	addq $16,%rbp
	jmp *(%rbp)
.align 3
	.quad	130
	.quad	32
block_ccqA_info:
_ccqA:
	leaq 7(%rbx),%rax
	movq 16(%rbp),%rbx
	addq (%rax),%rbx
	movq 8(%rbp),%rax
	addq $24,%rbp
_ncqT:
	movq %rbx,%rsi
	movq %rax,%r14
_ccqi:
	leaq block_ccql_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %r14,%rbx
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	testb $7,%bl
	jne _ccql
_ccqm:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl main_eta2_closure
main_eta2_closure:
	.quad	main_eta2_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta2_info
main_eta2_info:
_ccr4:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _ccr8
_ccr9:
	leaq block_ccr2_info(%rip),%rax
	movq %rax,-8(%rbp)
	xorl %esi,%esi
	addq $-8,%rbp
	jmp $wgo3_info
_ccrc:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
.align 3
	.quad	0
	.quad	32
block_ccr2_info:
_ccr2:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _ccrc
_ccrb:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_ccr8:
	leaq main_eta2_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo4_closure
$wgo4_closure:
	.quad	$wgo4_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	2
	.quad	19
sat_scnS_info:
_ccrQ:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _ccrR
_ccrS:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_ccrO_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
_ccrR:
	jmp *-16(%r13)
.align 3
	.quad	0
	.quad	32
block_ccrO_info:
_ccrO:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wgo4_info
$wgo4_info:
_ccrW:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _ccrX
_ccrC:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _ccs0
_ccrZ:
	testq %rdi,%rdi
	jle _ccs7
_ccs3:
	leaq sat_scnS_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_ccs1_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _ccs1
_ccs4:
	jmp *(%rbx)
_ccs7:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
.align 3
	.quad	259
	.quad	32
block_ccs1_info:
_ccs1:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 24(%rbp),%rdx
	decq %rdx
	addq $32,%rbp
_ncsm:
	movq %rdx,%rdi
	movq %rcx,%rsi
	movq %rax,%r14
	jmp _ccrC
_ccs0:
	movq $32,904(%r13)
_ccrX:
	leaq $wgo4_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wmain3_closure
$wmain3_closure:
	.quad	$wmain3_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-($wmain3_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wmain3_info
$wmain3_info:
_ccss:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta2_closure+1(%rip),%r14
	jmp $wgo4_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main19_closure
main19_closure:
	.quad	main19_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-(main19_info)+8
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main19_info
main19_info:
_ccsK:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _ccsL
_ccsM:
	leaq block_ccsH_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _ccsH
_ccsI:
	jmp *(%rbx)
_ccsL:
	leaq main19_closure(%rip),%rbx
	jmp *-8(%r13)
.align 3
	.quad	Scsv_srt-(block_ccsH_info)+8
	.quad	0
	.quad	4294967328
block_ccsH_info:
_ccsH:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wmain3_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main18_closure
main18_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main20_closure
	.quad	main19_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main17_closure
main17_closure:
	.quad	main17_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
.align 3
.align 0
cct4_str:
	.byte	102
	.byte	115
	.byte	117
	.byte	109
	.byte	49
	.byte	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl main17_info
main17_info:
_cct5:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _cct6
_cct7:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _cct3
_cct2:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq cct4_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_cct6:
	jmp *-16(%r13)
_cct3:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl main10_closure
main10_closure:
	.quad	I#_static_info
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main_eta_closure
main_eta_closure:
	.quad	main_eta_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta_info
main_eta_info:
_cctl:
	movq %r14,%rdi
	leaq main10_closure+1(%rip),%rsi
	leaq $fNumInt_$c+_closure+2(%rip),%r14
	jmp foldl_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo2_closure
$wgo2_closure:
	.quad	$wgo2_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	2
	.quad	19
sat_scob_info:
_cctY:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _cctZ
_ccu0:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_cctW_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
_cctZ:
	jmp *-16(%r13)
.align 3
	.quad	0
	.quad	32
block_cctW_info:
_cctW:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wgo2_info
$wgo2_info:
_ccu4:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _ccu5
_cctK:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _ccu8
_ccu7:
	testq %rdi,%rdi
	jle _ccuf
_ccub:
	leaq sat_scob_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_ccu9_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _ccu9
_ccuc:
	jmp *(%rbx)
_ccuf:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
.align 3
	.quad	259
	.quad	32
block_ccu9_info:
_ccu9:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 24(%rbp),%rdx
	decq %rdx
	addq $32,%rbp
_ncuu:
	movq %rdx,%rdi
	movq %rcx,%rsi
	movq %rax,%r14
	jmp _cctK
_ccu8:
	movq $32,904(%r13)
_ccu5:
	leaq $wgo2_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wmain2_closure
$wmain2_closure:
	.quad	$wmain2_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-($wmain2_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wmain2_info
$wmain2_info:
_ccuA:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta_closure+1(%rip),%r14
	jmp $wgo2_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main16_closure
main16_closure:
	.quad	main16_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-(main16_info)+24
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main16_info
main16_info:
_ccuR:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _ccuS
_ccuT:
	leaq block_ccuO_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _ccuO
_ccuP:
	jmp *(%rbx)
_ccuS:
	leaq main16_closure(%rip),%rbx
	jmp *-8(%r13)
.align 3
	.quad	Scsv_srt-(block_ccuO_info)+24
	.quad	0
	.quad	4294967328
block_ccuO_info:
_ccuO:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wmain2_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main15_closure
main15_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main17_closure
	.quad	main16_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main14_closure
main14_closure:
	.quad	main14_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
.align 3
.align 0
ccvb_str:
	.byte	112
	.byte	115
	.byte	117
	.byte	109
	.byte	50
	.byte	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl main14_info
main14_info:
_ccvc:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccvd
_ccve:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccva
_ccv9:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq ccvb_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_ccvd:
	jmp *-16(%r13)
_ccva:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo_closure
$wgo_closure:
	.quad	$wgo_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	8589934606
	.quad	0
	.quad	15
.globl $wgo_info
$wgo_info:
_ccvJ:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jae _ccvz
_ccvK:
	leaq $wgo_closure(%rip),%rbx
	jmp *-8(%r13)
_ccvH:
	leaq block_ccvR_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testb $7,%bl
	jne _ccvR
_ccvT:
	jmp *(%rbx)
.align 3
	.quad	65
	.quad	32
block_ccvC_info:
_ccvC:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	jne _ccvH
_ccvG:
	movq 8(%rbp),%rbx
	addq $16,%rbp
	jmp *(%rbp)
.align 3
	.quad	130
	.quad	32
block_ccvR_info:
_ccvR:
	leaq 7(%rbx),%rax
	movq 16(%rbp),%rbx
	addq (%rax),%rbx
	movq 8(%rbp),%rax
	addq $24,%rbp
_ncwa:
	movq %rbx,%rsi
	movq %rax,%r14
_ccvz:
	leaq block_ccvC_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %r14,%rbx
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	testb $7,%bl
	jne _ccvC
_ccvD:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl main_eta1_closure
main_eta1_closure:
	.quad	main_eta1_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main_eta1_info
main_eta1_info:
_ccwl:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _ccwp
_ccwq:
	leaq block_ccwj_info(%rip),%rax
	movq %rax,-8(%rbp)
	xorl %esi,%esi
	addq $-8,%rbp
	jmp $wgo_info
_ccwt:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
.align 3
	.quad	0
	.quad	32
block_ccwj_info:
_ccwj:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _ccwt
_ccws:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_ccwp:
	leaq main_eta1_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo1_closure
$wgo1_closure:
	.quad	$wgo1_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	2
	.quad	19
sat_scoE_info:
_ccx7:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _ccx8
_ccx9:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_ccx5_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
_ccx8:
	jmp *-16(%r13)
.align 3
	.quad	0
	.quad	32
block_ccx5_info:
_ccx5:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wgo1_info
$wgo1_info:
_ccxd:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _ccxe
_ccwT:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _ccxh
_ccxg:
	testq %rdi,%rdi
	jle _ccxo
_ccxk:
	leaq sat_scoE_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_ccxi_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _ccxi
_ccxl:
	jmp *(%rbx)
_ccxo:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
.align 3
	.quad	259
	.quad	32
block_ccxi_info:
_ccxi:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 24(%rbp),%rdx
	decq %rdx
	addq $32,%rbp
_ncxD:
	movq %rdx,%rdi
	movq %rcx,%rsi
	movq %rax,%r14
	jmp _ccwT
_ccxh:
	movq $32,904(%r13)
_ccxe:
	leaq $wgo1_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wmain1_closure
$wmain1_closure:
	.quad	$wmain1_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-($wmain1_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wmain1_info
$wmain1_info:
_ccxJ:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta1_closure+1(%rip),%r14
	jmp $wgo1_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main13_closure
main13_closure:
	.quad	main13_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-(main13_info)+40
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main13_info
main13_info:
_ccy0:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _ccy1
_ccy2:
	leaq block_ccxX_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _ccxX
_ccxY:
	jmp *(%rbx)
_ccy1:
	leaq main13_closure(%rip),%rbx
	jmp *-8(%r13)
.align 3
	.quad	Scsv_srt-(block_ccxX_info)+40
	.quad	0
	.quad	4294967328
block_ccxX_info:
_ccxX:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wmain1_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main12_closure
main12_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main14_closure
	.quad	main13_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main11_closure
main11_closure:
	.quad	main11_info
	.quad	0
	.quad	0
	.quad	0

==================== Asm code ====================
.const
.align 3
.align 0
ccyk_str:
	.byte	80
	.byte	46
	.byte	115
	.byte	117
	.byte	109
	.byte	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	0
	.quad	22
.globl main11_info
main11_info:
_ccyl:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _ccym
_ccyn:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _ccyj
_ccyi:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq ccyk_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_ccym:
	jmp *-16(%r13)
_ccyj:
	jmp *(%rbx)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wgo12_closure
$wgo12_closure:
	.quad	$wgo12_info

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	2
	.quad	19
sat_scoX_info:
_ccz1:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _ccz2
_ccz3:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_ccyZ_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
_ccz2:
	jmp *-16(%r13)
.align 3
	.quad	0
	.quad	32
block_ccyZ_info:
_ccyZ:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wgo12_info
$wgo12_info:
_ccz7:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _ccz8
_ccyN:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _cczb
_ccza:
	testq %rdi,%rdi
	jle _cczi
_ccze:
	leaq sat_scoX_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_cczc_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _cczc
_cczf:
	jmp *(%rbx)
_cczi:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
.align 3
	.quad	259
	.quad	32
block_cczc_info:
_cczc:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 24(%rbp),%rdx
	decq %rdx
	addq $32,%rbp
_nczx:
	movq %rdx,%rdi
	movq %rcx,%rsi
	movq %rax,%r14
	jmp _ccyN
_cczb:
	movq $32,904(%r13)
_ccz8:
	leaq $wgo12_closure(%rip),%rbx
	jmp *-8(%r13)

==================== Asm code ====================
.data
.align 3
.align 0
.globl $wmain_closure
$wmain_closure:
	.quad	$wmain_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-($wmain_info)+0
	.quad	8589934596
	.quad	0
	.quad	4294967311
.globl $wmain_info
$wmain_info:
_cczD:
	movq %r14,%rdi
	leaq myList_closure(%rip),%rsi
	leaq main_eta_closure+1(%rip),%r14
	jmp $wgo12_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main9_closure
main9_closure:
	.quad	main9_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-(main9_info)+56
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main9_info
main9_info:
_cczU:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _cczV
_cczW:
	leaq block_cczR_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _cczR
_cczS:
	jmp *(%rbx)
_cczV:
	leaq main9_closure(%rip),%rbx
	jmp *-8(%r13)
.align 3
	.quad	Scsv_srt-(block_cczR_info)+56
	.quad	0
	.quad	4294967328
block_cczR_info:
_cczR:
	movq 7(%rbx),%r14
	addq $8,%rbp
	jmp $wmain_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main8_closure
main8_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main11_closure
	.quad	main9_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main7_closure
main7_closure:
	.quad	:_static_info
	.quad	main8_closure+2
	.quad	[]_closure+1
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main6_closure
main6_closure:
	.quad	:_static_info
	.quad	main12_closure+2
	.quad	main7_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main5_closure
main5_closure:
	.quad	:_static_info
	.quad	main15_closure+2
	.quad	main6_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main4_closure
main4_closure:
	.quad	:_static_info
	.quad	main18_closure+2
	.quad	main5_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main3_closure
main3_closure:
	.quad	Criterion.Types.BenchGroup_static_info
	.quad	main21_closure
	.quad	main4_closure+2
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main2_closure
main2_closure:
	.quad	:_static_info
	.quad	main3_closure+3
	.quad	[]_closure+1
	.quad	0

==================== Asm code ====================
.data
.align 3
.align 0
.globl main1_closure
main1_closure:
	.quad	main1_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-(main1_info)+72
	.quad	4294967299
	.quad	0
	.quad	30064771087
.globl main1_info
main1_info:
_ccAo:
	leaq main2_closure+2(%rip),%rsi
	leaq Criterion.Options.defaultConfig_closure(%rip),%r14
	jmp Criterion.defaultMain2_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main_closure
main_closure:
	.quad	main_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-(main_info)+96
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl main_info
main_info:
_ccAz:
	jmp main1_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl main22_closure
main22_closure:
	.quad	main22_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-(main22_info)+96
	.quad	4294967299
	.quad	0
	.quad	12884901903
.globl main22_info
main22_info:
_ccAK:
	leaq main1_closure+1(%rip),%r14
	jmp runMainIO1_info

==================== Asm code ====================
.data
.align 3
.align 0
.globl :main_closure
:main_closure:
	.quad	:main_info
	.quad	0

==================== Asm code ====================
.text
.align 3
.align 3
	.quad	Scsv_srt-(:main_info)+112
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl :main_info
:main_info:
_ccAV:
	jmp main22_info

==================== Asm code ====================
.const_data
.align 3
.align 0
Scsv_srt:
	.quad	myList_closure
	.quad	$wmain3_closure
	.quad	main19_closure
	.quad	$wmain2_closure
	.quad	main16_closure
	.quad	$wmain1_closure
	.quad	main13_closure
	.quad	$wmain_closure
	.quad	main9_closure
	.quad	Criterion.defaultMain2_closure
	.quad	Criterion.Options.defaultConfig_closure
	.quad	main2_closure
	.quad	main1_closure
	.quad	runMainIO1_closure
	.quad	main22_closure

Linking BenchSum ...


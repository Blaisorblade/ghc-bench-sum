$ stack --resolver lts-2.22 exec -- ghc-core --no-syntax -- -O BenchSum.hs
[1 of 1] Compiling Main             ( BenchSum.hs, BenchSum.o )

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 293, types: 287, coercions: 57}

myList :: [Int]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 40 0}]
myList = efdtInt 1 2 10000

main22 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 50 0}]
main22 = unpackCString# "avgSimpl"#

main21 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 50 0}]
main21 = unpackCString# "fsum2"#

$wgo1 [Occ=LoopBreaker] :: [Int] -> Int#

$wgo1 =
  \ (w_s7kC :: [Int]) ->
    case w_s7kC of _ [Occ=Dead] {
      [] -> 0;
      : y_a7jm ys_a7jn ->
        case y_a7jm of _ [Occ=Dead] { I# x_a7jL ->
        case $wgo1 ys_a7jn of ww_s7kF { __DEFAULT ->
        +# x_a7jL ww_s7kF
        }
        }
    }

main20 [InlPrag=INLINE[0]]
  :: [Int] -> Data.Monoid.Sum Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7kH [Occ=Once] :: [Int]) ->
                 case $wgo1 w_s7kH of ww_s7kK { __DEFAULT ->
                 (I# ww_s7kK)
                 `cast` (Sym (Data.Monoid.NTCo:Sum[0] <Int>_R)
                         :: Int ~# Data.Monoid.Sum Int)
                 }}]
main20 =
  \ (w_s7kH :: [Int]) ->
    case $wgo1 w_s7kH of ww_s7kK { __DEFAULT ->
    (I# ww_s7kK)
    `cast` (Sym (Data.Monoid.NTCo:Sum[0] <Int>_R)
            :: Int ~# Data.Monoid.Sum Int)
    }

$wa3 [Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa3 =
  \ (w_s7kM :: [Int] -> Int)
    (w1_s7kN :: [Int])
    (ww_s7kS :: Int#)
    (w2_s7kP :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s7kS 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s7kM w1_s7kN of _ [Occ=Dead] { I# ipv_a5oH ->
                ()
                })
               w2_s7kP
        of _ [Occ=Dead] { (# ipv_a5oy, ipv1_a5oz #) ->
        $wa3 w_s7kM w1_s7kN (-# ww_s7kS 1) ipv_a5oy
        };
      True -> (# w2_s7kP, () #)
    }

main19
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=2, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 0] 50 0}]
main19 =
  \ (eta2_a4Dh :: Int64)
    (eta3_a4SH :: State# RealWorld) ->
    case eta2_a4Dh of _ [Occ=Dead] { I64# ww1_s7kS ->
    $wa3
      (main20
       `cast` (<[Int]>_R
               -> Data.Monoid.NTCo:Sum[0] <Int>_R
               :: ([Int] -> Data.Monoid.Sum Int)
                    ~#
                  ([Int] -> Int)))
      myList
      ww1_s7kS
      eta3_a4SH
    }

main18 :: Criterion.Types.Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main18 =
  Criterion.Types.Benchmark
    main21
    (main19
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                  ~#
                Criterion.Types.Benchmarkable))

main17 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 50 0}]
main17 = unpackCString# "F.sum"#

$wgo [Occ=LoopBreaker] :: [Int] -> Int#

$wgo =
  \ (w_s7kV :: [Int]) ->
    case w_s7kV of _ [Occ=Dead] {
      [] -> 0;
      : y_a7jm ys_a7jn ->
        case y_a7jm of _ [Occ=Dead] { I# x_a7jL ->
        case $wgo ys_a7jn of ww_s7kY { __DEFAULT ->
        +# x_a7jL ww_s7kY
        }
        }
    }

main16 [InlPrag=INLINE[0]]
  :: [Int] -> Data.Monoid.Sum Int
[GblId,
 Arity=1,

 Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7l0 [Occ=Once] :: [Int]) ->
                 case $wgo w_s7l0 of ww_s7l3 { __DEFAULT ->
                 (I# ww_s7l3)
                 `cast` (Sym (Data.Monoid.NTCo:Sum[0] <Int>_R)
                         :: Int ~# Data.Monoid.Sum Int)
                 }}]
main16 =
  \ (w_s7l0 :: [Int]) ->
    case $wgo w_s7l0 of ww_s7l3 { __DEFAULT ->
    (I# ww_s7l3)
    `cast` (Sym (Data.Monoid.NTCo:Sum[0] <Int>_R)
            :: Int ~# Data.Monoid.Sum Int)
    }

$wa2 [Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa2 =
  \ (w_s7l5 :: [Int] -> Int)
    (w1_s7l6 :: [Int])
    (ww_s7lb :: Int#)
    (w2_s7l8 :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s7lb 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s7l5 w1_s7l6 of _ [Occ=Dead] { I# ipv_a5oH ->
                ()
                })
               w2_s7l8
        of _ [Occ=Dead] { (# ipv_a5oy, ipv1_a5oz #) ->
        $wa2 w_s7l5 w1_s7l6 (-# ww_s7lb 1) ipv_a5oy
        };
      True -> (# w2_s7l8, () #)
    }

main15
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=2, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 0] 50 0}]
main15 =
  \ (eta2_X4E7 :: Int64)
    (eta3_X4Ty :: State# RealWorld) ->
    case eta2_X4E7 of _ [Occ=Dead] { I64# ww1_s7lb ->
    $wa2
      (main16
       `cast` (<[Int]>_R
               -> Data.Monoid.NTCo:Sum[0] <Int>_R
               :: ([Int] -> Data.Monoid.Sum Int)
                    ~#
                  ([Int] -> Int)))
      myList
      ww1_s7lb
      eta3_X4Ty
    }

main14 :: Criterion.Types.Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main14 =
  Criterion.Types.Benchmark
    main17
    (main15
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                  ~#
                Criterion.Types.Benchmarkable))

main13 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 50 0}]
main13 = unpackCString# "psum2"#

$wa1 [Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa1 =
  \ (w_s7le :: [Int] -> Int)
    (w1_s7lf :: [Int])
    (ww_s7lk :: Int#)
    (w2_s7lh :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s7lk 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s7le w1_s7lf of _ [Occ=Dead] { I# ipv_a5oH ->
                ()
                })
               w2_s7lh
        of _ [Occ=Dead] { (# ipv_a5oy, ipv1_a5oz #) ->
        $wa1 w_s7le w1_s7lf (-# ww_s7lk 1) ipv_a5oy
        };
      True -> (# w2_s7lh, () #)
    }

main12
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=2, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 0] 50 0}]
main12 =
  \ (eta2_X4Ee :: Int64)
    (eta3_X4TF :: State# RealWorld) ->
    case eta2_X4Ee of _ [Occ=Dead] { I64# ww1_s7lk ->
    $wa1 Data.List.sum_$ssum1 myList ww1_s7lk eta3_X4TF
    }

main11 :: Criterion.Types.Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main11 =
  Criterion.Types.Benchmark
    main13
    (main12
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                  ~#
                Criterion.Types.Benchmarkable))

main10 :: [Char]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 50 0}]
main10 = unpackCString# "P.sum"#

$wa [Occ=LoopBreaker]
  :: ([Int] -> Int)
     -> [Int]
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,

$wa =
  \ (w_s7ln :: [Int] -> Int)
    (w1_s7lo :: [Int])
    (ww_s7lt :: Int#)
    (w2_s7lq :: State# RealWorld) ->
    case tagToEnum# @ Bool (<=# ww_s7lt 0)
    of _ [Occ=Dead] {
      False ->
        case seq#
               @ ()
               @ RealWorld
               (case w_s7ln w1_s7lo of _ [Occ=Dead] { I# ipv_a5oH ->
                ()
                })
               w2_s7lq
        of _ [Occ=Dead] { (# ipv_a5oy, ipv1_a5oz #) ->
        $wa w_s7ln w1_s7lo (-# ww_s7lt 1) ipv_a5oy
        };
      True -> (# w2_s7lq, () #)
    }

main9
  :: Int64
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=2,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=2, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 0] 50 0}]
main9 =
  \ (eta2_X4Ei :: Int64)
    (eta3_X4TJ :: State# RealWorld) ->
    case eta2_X4Ei of _ [Occ=Dead] { I64# ww1_s7lt ->
    $wa Data.List.sum_$ssum1 myList ww1_s7lt eta3_X4TJ
    }

main8 :: Criterion.Types.Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main8 =
  Criterion.Types.Benchmark
    main10
    (main9
     `cast` ((<Int64>_R -> Sym (NTCo:IO[0] <()>_R))
             ; Sym Criterion.Types.NTCo:Benchmarkable[0]
             :: (Int64
                 -> State# RealWorld
                 -> (# State# RealWorld, () #))
                  ~#
                Criterion.Types.Benchmarkable))

main7 :: [Criterion.Types.Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main7 =
  :
    @ Criterion.Types.Benchmark
    main8
    ([] @ Criterion.Types.Benchmark)

main6 :: [Criterion.Types.Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main6 =
  : @ Criterion.Types.Benchmark main11 main7

main5 :: [Criterion.Types.Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main5 =
  : @ Criterion.Types.Benchmark main14 main6

main4 :: [Criterion.Types.Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main4 =
  : @ Criterion.Types.Benchmark main18 main5

main3 :: Criterion.Types.Benchmark
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main3 = Criterion.Types.BenchGroup main22 main4

main2 :: [Criterion.Types.Benchmark]
[GblId,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
main2 =
  :
    @ Criterion.Types.Benchmark
    main3
    ([] @ Criterion.Types.Benchmark)

main1
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0] 30 0}]
main1 =
  \ (eta_B1 :: State# RealWorld) ->
    Criterion.defaultMain2
      Criterion.Options.defaultConfig main2 eta_B1

main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
main =
  main1
  `cast` (Sym (NTCo:IO[0] <()>_R)
          :: (State# RealWorld
              -> (# State# RealWorld, () #))
               ~#
             IO ())

main23
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
main23 =
  \ (eta_B1 :: State# RealWorld) ->
    runMainIO1
      @ ()
      (main1
       `cast` (Sym (NTCo:IO[0] <()>_R)
               :: (State# RealWorld
                   -> (# State# RealWorld, () #))
                    ~#
                  IO ()))
      eta_B1

:main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
:main =
  main23
  `cast` (Sym (NTCo:IO[0] <()>_R)
          :: (State# RealWorld
              -> (# State# RealWorld, () #))
               ~#
             IO ())

==================== Asm code ====================
.data
.align 3
.align 0
.globl __stginit_main:Main
__stginit_main:Main:
.data
.align 3
.align 0
.globl myList_closure
myList_closure:
	.quad	myList_info
	.quad	0
	.quad	0
	.quad	0
.text
.align 3
myList_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl myList_info
myList_info:
_c7qJ:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7qK
_c7qL:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7qI
_c7qH:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $10000,%edi
	movl $2,%esi
	movl $1,%r14d
	addq $-16,%rbp
	jmp efdtInt_info
_c7qI:
	jmp *(%rbx)
_c7qK:
	jmp *-16(%r13)
	.long  myList_info - myList_info_dsp
.data
.align 3
.align 0
.globl main22_closure
main22_closure:
	.quad	main22_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
c7qY_str:
	.byte	97
	.byte	118
	.byte	103
	.byte	83
	.byte	105
	.byte	109
	.byte	112
	.byte	108
	.byte	0
.text
.align 3
main22_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl main22_info
main22_info:
_c7qZ:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7r0
_c7r1:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7qX
_c7qW:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c7qY_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c7qX:
	jmp *(%rbx)
_c7r0:
	jmp *-16(%r13)
	.long  main22_info - main22_info_dsp
.data
.align 3
.align 0
.globl main21_closure
main21_closure:
	.quad	main21_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
c7rf_str:
	.byte	102
	.byte	115
	.byte	117
	.byte	109
	.byte	50
	.byte	0
.text
.align 3
main21_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl main21_info
main21_info:
_c7rg:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7rh
_c7ri:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7re
_c7rd:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c7rf_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c7re:
	jmp *(%rbx)
_c7rh:
	jmp *-16(%r13)
	.long  main21_info - main21_info_dsp
.data
.align 3
.align 0
.globl $wgo1_closure
$wgo1_closure:
	.quad	$wgo1_info
.text
.align 3
$wgo1_info_dsp:
.text
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl $wgo1_info
$wgo1_info:
_c7rQ:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7s9
_c7sa:
	leaq block_c7rG_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7rG
_c7rH:
	jmp *(%rbx)
.text
.align 3
	.quad	0
	.quad	32
block_c7rG_info:
_c7rG:
	movq %rbx,%rax
	andq $7,%rax
	cmpq $2,%rax
	jae _c7rO
_c7rP:
	xorl %ebx,%ebx
	addq $8,%rbp
	jmp *(%rbp)
_c7rO:
	leaq block_c7rU_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7rU
_c7rV:
	jmp *(%rbx)
.text
.align 3
	.quad	1
	.quad	32
block_c7rU_info:
_c7rU:
	leaq block_c7rZ_info(%rip),%rax
	movq %rax,(%rbp)
	movq 8(%rbp),%r14
	movq 7(%rbx),%rax
	movq %rax,8(%rbp)
	jmp $wgo1_info
.text
.align 3
	.quad	65
	.quad	32
block_c7rZ_info:
_c7rZ:
	movq %rbx,%rax
	movq 8(%rbp),%rbx
	addq %rax,%rbx
	addq $16,%rbp
	jmp *(%rbp)
_c7s9:
	leaq $wgo1_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wgo1_info - $wgo1_info_dsp
.data
.align 3
.align 0
.globl main20_closure
main20_closure:
	.quad	main20_info
.text
.align 3
main20_info_dsp:
.text
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main20_info
main20_info:
_c7sw:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7sD
_c7sE:
	leaq block_c7su_info(%rip),%rax
	movq %rax,-8(%rbp)
	addq $-8,%rbp
	jmp $wgo1_info
.text
.align 3
	.quad	0
	.quad	32
block_c7su_info:
_c7su:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _c7sC
_c7sB:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7sC:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
_c7sD:
	leaq main20_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main20_info - main20_info_dsp
.data
.align 3
.align 0
.globl $wa3_closure
$wa3_closure:
	.quad	$wa3_info
.text
.align 3
sat_s7pu_info_dsp:
.text
.align 3
	.quad	2
	.quad	19
sat_s7pu_info:
_c7ti:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7tm
_c7tn:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c7tg_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
.align 3
	.quad	0
	.quad	32
block_c7tg_info:
_c7tg:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7tm:
	jmp *-16(%r13)
	.long  sat_s7pu_info - sat_s7pu_info_dsp
.text
.align 3
$wa3_info_dsp:
.text
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa3_info
$wa3_info:
_c7to:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c7tw
_c7tx:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c7tC
_c7ty:
	testq %rdi,%rdi
	jle _c7tu
_c7tv:
	leaq sat_s7pu_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c7tp_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testq $7,%rbx
	jne _c7tp
_c7tz:
	jmp *(%rbx)
.text
.align 3
	.quad	259
	.quad	32
block_c7tp_info:
_c7tp:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa3_info
_c7tu:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
_c7tC:
	movq $32,904(%r13)
_c7tw:
	leaq $wa3_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wa3_info - $wa3_info_dsp
.data
.align 3
.align 0
.globl main19_closure
main19_closure:
	.quad	main19_info
	.quad	0
.text
.align 3
main19_info_dsp:
.text
.align 3
	.quad	S7u7_srt-(main19_info)+0
	.quad	8589934597
	.quad	0
	.quad	12884901903
.globl main19_info
main19_info:
_c7u1:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7u5
_c7u6:
	leaq block_c7tY_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7tY
_c7tZ:
	jmp *(%rbx)
.text
.align 3
	.quad	S7u7_srt-(block_c7tY_info)+0
	.quad	0
	.quad	4294967328
block_c7tY_info:
_c7tY:
	movq 7(%rbx),%rdi
	leaq myList_closure(%rip),%rsi
	leaq main20_closure+1(%rip),%r14
	addq $8,%rbp
	jmp $wa3_info
_c7u5:
	leaq main19_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main19_info - main19_info_dsp
.data
.align 3
.align 0
.globl main18_closure
main18_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main21_closure
	.quad	main19_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main17_closure
main17_closure:
	.quad	main17_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
c7um_str:
	.byte	70
	.byte	46
	.byte	115
	.byte	117
	.byte	109
	.byte	0
.text
.align 3
main17_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl main17_info
main17_info:
_c7un:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7uo
_c7up:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7ul
_c7uk:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c7um_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c7ul:
	jmp *(%rbx)
_c7uo:
	jmp *-16(%r13)
	.long  main17_info - main17_info_dsp
.data
.align 3
.align 0
.globl $wgo_closure
$wgo_closure:
	.quad	$wgo_info
.text
.align 3
$wgo_info_dsp:
.text
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl $wgo_info
$wgo_info:
_c7uX:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7vg
_c7vh:
	leaq block_c7uN_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7uN
_c7uO:
	jmp *(%rbx)
.text
.align 3
	.quad	0
	.quad	32
block_c7uN_info:
_c7uN:
	movq %rbx,%rax
	andq $7,%rax
	cmpq $2,%rax
	jae _c7uV
_c7uW:
	xorl %ebx,%ebx
	addq $8,%rbp
	jmp *(%rbp)
_c7uV:
	leaq block_c7v1_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7v1
_c7v2:
	jmp *(%rbx)
.text
.align 3
	.quad	1
	.quad	32
block_c7v1_info:
_c7v1:
	leaq block_c7v6_info(%rip),%rax
	movq %rax,(%rbp)
	movq 8(%rbp),%r14
	movq 7(%rbx),%rax
	movq %rax,8(%rbp)
	jmp $wgo_info
.text
.align 3
	.quad	65
	.quad	32
block_c7v6_info:
_c7v6:
	movq %rbx,%rax
	movq 8(%rbp),%rbx
	addq %rax,%rbx
	addq $16,%rbp
	jmp *(%rbp)
_c7vg:
	leaq $wgo_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wgo_info - $wgo_info_dsp
.data
.align 3
.align 0
.globl main16_closure
main16_closure:
	.quad	main16_info
.text
.align 3
main16_info_dsp:
.text
.align 3
	.quad	4294967301
	.quad	0
	.quad	15
.globl main16_info
main16_info:
_c7vD:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7vK
_c7vL:
	leaq block_c7vB_info(%rip),%rax
	movq %rax,-8(%rbp)
	addq $-8,%rbp
	jmp $wgo_info
.text
.align 3
	.quad	0
	.quad	32
block_c7vB_info:
_c7vB:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _c7vJ
_c7vI:
	leaq I#_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rbx,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7vJ:
	movq $16,904(%r13)
	jmp *stg_gc_unbx_r1@GOTPCREL(%rip)
_c7vK:
	leaq main16_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main16_info - main16_info_dsp
.data
.align 3
.align 0
.globl $wa2_closure
$wa2_closure:
	.quad	$wa2_info
.text
.align 3
sat_s7pU_info_dsp:
.text
.align 3
	.quad	2
	.quad	19
sat_s7pU_info:
_c7wp:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7wt
_c7wu:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c7wn_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
.align 3
	.quad	0
	.quad	32
block_c7wn_info:
_c7wn:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7wt:
	jmp *-16(%r13)
	.long  sat_s7pU_info - sat_s7pU_info_dsp
.text
.align 3
$wa2_info_dsp:
.text
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa2_info
$wa2_info:
_c7wv:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c7wD
_c7wE:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c7wJ
_c7wF:
	testq %rdi,%rdi
	jle _c7wB
_c7wC:
	leaq sat_s7pU_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c7ww_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testq $7,%rbx
	jne _c7ww
_c7wG:
	jmp *(%rbx)
.text
.align 3
	.quad	259
	.quad	32
block_c7ww_info:
_c7ww:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa2_info
_c7wB:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
_c7wJ:
	movq $32,904(%r13)
_c7wD:
	leaq $wa2_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wa2_info - $wa2_info_dsp
.data
.align 3
.align 0
.globl main15_closure
main15_closure:
	.quad	main15_info
	.quad	0
.text
.align 3
main15_info_dsp:
.text
.align 3
	.quad	S7u7_srt-(main15_info)+0
	.quad	8589934597
	.quad	0
	.quad	21474836495
.globl main15_info
main15_info:
_c7x8:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7xc
_c7xd:
	leaq block_c7x5_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7x5
_c7x6:
	jmp *(%rbx)
.text
.align 3
	.quad	S7u7_srt-(block_c7x5_info)+0
	.quad	0
	.quad	4294967328
block_c7x5_info:
_c7x5:
	movq 7(%rbx),%rdi
	leaq myList_closure(%rip),%rsi
	leaq main16_closure+1(%rip),%r14
	addq $8,%rbp
	jmp $wa2_info
_c7xc:
	leaq main15_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main15_info - main15_info_dsp
.data
.align 3
.align 0
.globl main14_closure
main14_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main17_closure
	.quad	main15_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main13_closure
main13_closure:
	.quad	main13_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
c7xs_str:
	.byte	112
	.byte	115
	.byte	117
	.byte	109
	.byte	50
	.byte	0
.text
.align 3
main13_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl main13_info
main13_info:
_c7xt:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7xu
_c7xv:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7xr
_c7xq:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c7xs_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c7xr:
	jmp *(%rbx)
_c7xu:
	jmp *-16(%r13)
	.long  main13_info - main13_info_dsp
.data
.align 3
.align 0
.globl $wa1_closure
$wa1_closure:
	.quad	$wa1_info
.text
.align 3
sat_s7qb_info_dsp:
.text
.align 3
	.quad	2
	.quad	19
sat_s7qb_info:
_c7y9:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7yd
_c7ye:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c7y7_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
.align 3
	.quad	0
	.quad	32
block_c7y7_info:
_c7y7:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7yd:
	jmp *-16(%r13)
	.long  sat_s7qb_info - sat_s7qb_info_dsp
.text
.align 3
$wa1_info_dsp:
.text
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa1_info
$wa1_info:
_c7yf:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c7yn
_c7yo:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c7yt
_c7yp:
	testq %rdi,%rdi
	jle _c7yl
_c7ym:
	leaq sat_s7qb_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c7yg_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testq $7,%rbx
	jne _c7yg
_c7yq:
	jmp *(%rbx)
.text
.align 3
	.quad	259
	.quad	32
block_c7yg_info:
_c7yg:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa1_info
_c7yl:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
_c7yt:
	movq $32,904(%r13)
_c7yn:
	leaq $wa1_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wa1_info - $wa1_info_dsp
.data
.align 3
.align 0
.globl main12_closure
main12_closure:
	.quad	main12_info
	.quad	0
.text
.align 3
main12_info_dsp:
.text
.align 3
	.quad	S7u7_srt-(main12_info)+0
	.quad	8589934597
	.quad	0
	.quad	38654705679
.globl main12_info
main12_info:
_c7yS:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7yW
_c7yX:
	leaq block_c7yP_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7yP
_c7yQ:
	jmp *(%rbx)
.text
.align 3
	.quad	S7u7_srt-(block_c7yP_info)+0
	.quad	0
	.quad	4294967328
block_c7yP_info:
_c7yP:
	movq 7(%rbx),%rdi
	leaq myList_closure(%rip),%rsi
	leaq Data.List.sum_$ssum1_closure+1(%rip),%r14
	addq $8,%rbp
	jmp $wa1_info
_c7yW:
	leaq main12_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main12_info - main12_info_dsp
.data
.align 3
.align 0
.globl main11_closure
main11_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main13_closure
	.quad	main12_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main10_closure
main10_closure:
	.quad	main10_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
c7zc_str:
	.byte	80
	.byte	46
	.byte	115
	.byte	117
	.byte	109
	.byte	0
.text
.align 3
main10_info_dsp:
.text
.align 3
	.quad	0
	.quad	22
.globl main10_info
main10_info:
_c7zd:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c7ze
_c7zf:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	movl $0,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c7zb
_c7za:
	movq stg_bh_upd_frame_info@GOTPCREL(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq c7zc_str(%rip),%r14
	addq $-16,%rbp
	jmp unpackCString#_info
_c7zb:
	jmp *(%rbx)
_c7ze:
	jmp *-16(%r13)
	.long  main10_info - main10_info_dsp
.data
.align 3
.align 0
.globl $wa_closure
$wa_closure:
	.quad	$wa_info
.text
.align 3
sat_s7qs_info_dsp:
.text
.align 3
	.quad	2
	.quad	19
sat_s7qs_info:
_c7zT:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c7zX
_c7zY:
	movq stg_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	movq %rbx,-8(%rbp)
	leaq block_c7zR_info(%rip),%rax
	movq %rax,-24(%rbp)
	movq 24(%rbx),%r14
	movq 16(%rbx),%rbx
	addq $-24,%rbp
	jmp stg_ap_p_fast
.text
.align 3
	.quad	0
	.quad	32
block_c7zR_info:
_c7zR:
	leaq ()_closure+1(%rip),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c7zX:
	jmp *-16(%r13)
	.long  sat_s7qs_info - sat_s7qs_info_dsp
.text
.align 3
$wa_info_dsp:
.text
.align 3
	.quad	17179869206
	.quad	0
	.quad	15
.globl $wa_info
$wa_info:
_c7zZ:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c7A7
_c7A8:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c7Ad
_c7A9:
	testq %rdi,%rdi
	jle _c7A5
_c7A6:
	leaq sat_s7qs_info(%rip),%rax
	movq %rax,-24(%r12)
	movq %r14,-8(%r12)
	movq %rsi,(%r12)
	leaq block_c7A0_info(%rip),%rax
	movq %rax,-32(%rbp)
	leaq -24(%r12),%rbx
	movq %r14,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	testq $7,%rbx
	jne _c7A0
_c7Aa:
	jmp *(%rbx)
.text
.align 3
	.quad	259
	.quad	32
block_c7A0_info:
_c7A0:
	movq 24(%rbp),%rax
	leaq -1(%rax),%rdi
	movq 16(%rbp),%rsi
	movq 8(%rbp),%r14
	addq $32,%rbp
	jmp $wa_info
_c7A5:
	addq $-32,%r12
	leaq ()_closure+1(%rip),%rbx
	jmp *(%rbp)
_c7Ad:
	movq $32,904(%r13)
_c7A7:
	leaq $wa_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  $wa_info - $wa_info_dsp
.data
.align 3
.align 0
.globl main9_closure
main9_closure:
	.quad	main9_info
	.quad	0
.text
.align 3
main9_info_dsp:
.text
.align 3
	.quad	S7u7_srt-(main9_info)+0
	.quad	8589934597
	.quad	0
	.quad	73014444047
.globl main9_info
main9_info:
_c7AC:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c7AG
_c7AH:
	leaq block_c7Az_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testq $7,%rbx
	jne _c7Az
_c7AA:
	jmp *(%rbx)
.text
.align 3
	.quad	S7u7_srt-(block_c7Az_info)+0
	.quad	0
	.quad	4294967328
block_c7Az_info:
_c7Az:
	movq 7(%rbx),%rdi
	leaq myList_closure(%rip),%rsi
	leaq Data.List.sum_$ssum1_closure+1(%rip),%r14
	addq $8,%rbp
	jmp $wa_info
_c7AG:
	leaq main9_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  main9_info - main9_info_dsp
.data
.align 3
.align 0
.globl main8_closure
main8_closure:
	.quad	Criterion.Types.Benchmark_static_info
	.quad	main10_closure
	.quad	main9_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main7_closure
main7_closure:
	.quad	:_static_info
	.quad	main8_closure+2
	.quad	[]_closure+1
	.quad	0
.data
.align 3
.align 0
.globl main6_closure
main6_closure:
	.quad	:_static_info
	.quad	main11_closure+2
	.quad	main7_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main5_closure
main5_closure:
	.quad	:_static_info
	.quad	main14_closure+2
	.quad	main6_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main4_closure
main4_closure:
	.quad	:_static_info
	.quad	main18_closure+2
	.quad	main5_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main3_closure
main3_closure:
	.quad	Criterion.Types.BenchGroup_static_info
	.quad	main22_closure
	.quad	main4_closure+2
	.quad	0
.data
.align 3
.align 0
.globl main2_closure
main2_closure:
	.quad	:_static_info
	.quad	main3_closure+3
	.quad	[]_closure+1
	.quad	0
.data
.align 3
.align 0
.globl main1_closure
main1_closure:
	.quad	main1_info
	.quad	0
.text
.align 3
main1_info_dsp:
.text
.align 3
	.quad	S7u7_srt-(main1_info)+40
	.quad	4294967299
	.quad	0
	.quad	30064771087
.globl main1_info
main1_info:
_c7B6:
	leaq main2_closure+2(%rip),%rsi
	leaq Criterion.Options.defaultConfig_closure(%rip),%r14
	jmp Criterion.defaultMain2_info
	.long  main1_info - main1_info_dsp
.data
.align 3
.align 0
.globl main_closure
main_closure:
	.quad	main_info
	.quad	0
.text
.align 3
main_info_dsp:
.text
.align 3
	.quad	S7u7_srt-(main_info)+64
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl main_info
main_info:
_c7Bh:
	jmp main1_info
	.long  main_info - main_info_dsp
.data
.align 3
.align 0
.globl main23_closure
main23_closure:
	.quad	main23_info
	.quad	0
.text
.align 3
main23_info_dsp:
.text
.align 3
	.quad	S7u7_srt-(main23_info)+64
	.quad	4294967299
	.quad	0
	.quad	12884901903
.globl main23_info
main23_info:
_c7Bs:
	leaq main1_closure+1(%rip),%r14
	jmp runMainIO1_info
	.long  main23_info - main23_info_dsp
.data
.align 3
.align 0
.globl :main_closure
:main_closure:
	.quad	:main_info
	.quad	0
.text
.align 3
:main_info_dsp:
.text
.align 3
	.quad	S7u7_srt-(:main_info)+80
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl :main_info
:main_info:
_c7BD:
	jmp main23_info
	.long  :main_info - :main_info_dsp
.const_data
.align 3
.align 0
S7u7_srt:
	.quad	myList_closure
	.quad	main19_closure
	.quad	main15_closure
	.quad	main12_closure
	.quad	main9_closure
	.quad	Criterion.defaultMain2_closure
	.quad	Criterion.Options.defaultConfig_closure
	.quad	main2_closure
	.quad	main1_closure
	.quad	runMainIO1_closure
	.quad	main23_closure

Linking BenchSum ...

